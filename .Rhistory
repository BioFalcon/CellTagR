panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
background.error <- background.mtx[,c(4,5)]
background.error$category <- col.path.sub[ref.meta.path[rownames(background.error), "cell.bc"], "label"]
ggplot(background.error, aes(x = Error, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(background.error, aes(x = Lagrangian, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
background.error$category <- paste0("Background.", background.error$category)
error.ref.background <- rbind(error.path.all, background.error)
ggplot(error.ref.background, aes(x = Error, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(error.ref.background, aes(x = Lagrangian, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
background.error$category <- paste0("Background.", background.error$category)
error.ref.background <- rbind(error.path.all, background.error)
ggplot(error.ref.background, aes(x = Error, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(error.ref.background, aes(x = Lagrangian, color = category)) +
geom_density() +
scale_color_viridis_d(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(error.path.all, aes(x = Error)) +
geom_density()
ggplot(background.error, aes(x = Error)) +
geom_density()
ggplot(background.error, aes(x = Lagrangian)) +
geom_density()
rslt <- table(classification.path$new.classification, classification.path$actual)
rslt
rslt <- as.data.frame(apply(rslt, 2, function(x) round(x * 100/sum(x), digits = 3)))
rownames(rslt) <- paste0("Capy.", rownames(rslt))
colnames(rslt) <- paste0("Actual.", colnames(rslt))
rslt$capy <- rownames(rslt)
rslt.stk <- reshape2::melt(rslt)
ggplot(rslt.stk, aes(x = variable, y = capy, fill = value)) +
geom_tile() +
scale_fill_viridis_c(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.text.x = element_text(angle = 45, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
library(ggpubr)
error.p1.p2.p3 <- error.path.other[which(error.path.other$category %in% c("Path1.Term", "Path2.Term", "Path3.Term")),]
ggqqplot(error.p1.p2.p3$Error)
shapiro.test(error.p1.p2.p3$Error)
library(ggpubr)
error.p1.p2.p3 <- error.path.other[which(error.path.other$category %in% c("Path1.Term", "Path2.Term", "Path3.Term")),]
ggqqplot(error.p1.p2.p3$Error)
shapiro.test(error.p1.p2.p3$Error)
ggqqplot(error.p1.p2.p3$Lagrangian)
shapiro.test(error.p1.p2.p3$Lagrangian)
library(ggpubr)
error.p1.p2.p3 <- error.path.other[which(error.path.other$category %in% c("Path1.Term", "Path2.Term", "Path3.Term")),]
ggqqplot(error.p1.p2.p3$Error)
shapiro.test(error.p1.p2.p3$Error)
ggqqplot(error.p1.p2.p3$Lagrangian)
shapiro.test(error.p1.p2.p3$Lagrangian)
plot(density(error.p1.p2.p3$Error))
plot(density(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path1.Term")]))
ggqqplot(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path1.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path1.Term")])
ggqqplot(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path2.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path2.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
ggqqplot(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
ggqqplot(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
plot(density(error.p1.p2.p3$Error)) + ylim(0,10)
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
plot(density(error.p1.p2.p3$Error)) + ylim(0,10)
plot(density(error.p1.p2.p3$Error),ylim = c(0,10))
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
plot(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)))
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(1000, mean = major.norm.mean, sd = new.sigma)), col = "red")
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(1000, mean = major.norm.mean, sd = new.sigma)), col = "red")
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(2000, mean = major.norm.mean, sd = new.sigma)), col = "red")
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(2000, mean = major.norm.mean, sd = 150)), col = "red")
plot(density(error.p1.p2.p3$Error))
lines(density(rnorm(2000, mean = major.norm.mean, sd = new.sigma)), col = "red")
ks.test(x = error.p1.p2.p3$Error, y = rnorm(2000, mean = major.norm.mean, sd = new.sigma))
library(ggpubr)
error.p1.p2.p3 <- error.path.other[which(error.path.other$category %in% c("Path1.Term", "Path2.Term", "Path3.Term")),]
ggqqplot(error.p1.p2.p3$Error)
shapiro.test(error.p1.p2.p3$Error)
ggqqplot(error.p1.p2.p3$Lagrangian)
shapiro.test(error.p1.p2.p3$Lagrangian)
ggqqplot(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
shapiro.test(error.p1.p2.p3$Error[which(error.p1.p2.p3$category == "Path3.Term")])
## Form a major normal distribution for the error
major.norm.mean <- mean(fitpro$parameters$mu)
new.sigma <- mean(fitpro$parameters$sigma)
plot(fitpro, ylim = c(0,0.003))
## Form a major normal distribution for the error
major.norm.mean <- mean(fitpro$parameters$mu)
new.sigma <- mean(fitpro$parameters$sigma)
plot(fitpro, ylim = 0.003)
## Form a major normal distribution for the error
major.norm.mean <- mean(fitpro$parameters$mu)
new.sigma <- mean(fitpro$parameters$sigma)
plot(fitpro)
lines(density(rnorm(1000, mean = major.norm.mean, sd = new.sigma)), col = "red")
## Form a major normal distribution for the lagrangian
major.norm.mean.2 <- mean(fitpro.2$parameters$mu)
new.sigma.2 <- mean(fitpro.2$parameters$sigma)
plot(fitpro.2)
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
## Form a major normal distribution for the error
major.norm.mean <- sum(fitpro$parameters$mu * fitpro$parameters$pi)
new.sigma <- sum(fitpro$parameters$sigma * fitpro$parameters$pi)
plot(fitpro)
lines(density(rnorm(1000, mean = major.norm.mean, sd = new.sigma)), col = "red")
## Form a major normal distribution for the lagrangian
major.norm.mean.2 <- sum(fitpro.2$parameters$mu * fitpro.2$parameters$pi)
new.sigma.2 <- sum(fitpro.2$parameters$sigma * fitpro.2$parameters$pi)
plot(fitpro.2)
lines(density(rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2)), col = "red")
### Get some p-values in the test qp errors
error.path.all$p.values <- 1 - pnorm(error.path.all$Error, mean = major.norm.mean, sd = new.sigma)
error.path.all$p.values.lm.lower <- pnorm(error.path.all$Lagrangian, mean = fitpro.2$parameters$mu[1], sd = fitpro.2$parameters$sigma[1])
error.path.all$p.values.lm.mode <- pnorm(error.path.all$Lagrangian, mean = major.norm.mean.2, sd = new.sigma.2)
classification.path$new.classification <- classification.path$call
classification.path[rownames(error.path.all)[which(error.path.all$p.values <= 0.05 | (error.path.all$p.values.lm <= 0.005))],"new.classification"] <- "Unassigned"
table(classification.path$new.classification, classification.path$actual)
### Get some p-values in the test qp errors
error.path.all$p.values <- 1 - pnorm(error.path.all$Error, mean = major.norm.mean, sd = new.sigma)
error.path.all$p.values.lm.lower <- pnorm(error.path.all$Lagrangian, mean = fitpro.2$parameters$mu[1], sd = fitpro.2$parameters$sigma[1])
error.path.all$p.values.lm.mode <- pnorm(error.path.all$Lagrangian, mean = major.norm.mean.2, sd = new.sigma.2)
classification.path$new.classification <- classification.path$call
classification.path[rownames(error.path.all)[which(error.path.all$p.values <= 0.05 | (error.path.all$p.values.lm.lower <= 0.005))],"new.classification"] <- "Unassigned"
table(classification.path$new.classification, classification.path$actual)
ks.test(x = error.p1.p2.p3$Lagrangian, y = rnorm(2000, mean = major.norm.mean.2, sd = new.sigma.2))
ks.test(x = error.p1.p2.p3$Lagrangian, y = rnorm(1000, mean = major.norm.mean.2, sd = new.sigma.2))
ks.test(x = error.p1.p2.p3$Lagrangian, y = rnorm(nrow(error.p1.p2.p3), mean = major.norm.mean.2, sd = new.sigma.2))
ks.test(x = error.p1.p2.p3$Error, y = rnorm(nrow(error.p1.p2.p3), mean = major.norm.mean, sd = new.sigma))
rslt <- table(classification.path$call, classification.path$actual)
rslt
rslt <- as.data.frame(apply(rslt, 2, function(x) round(x * 100/sum(x), digits = 3)))
rownames(rslt) <- paste0("Capy.", rownames(rslt))
colnames(rslt) <- paste0("Actual.", colnames(rslt))
rslt$capy <- rownames(rslt)
rslt.stk <- reshape2::melt(rslt)
ggplot(rslt.stk, aes(x = variable, y = capy, fill = value)) +
geom_tile() +
scale_fill_viridis_c(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.text.x = element_text(angle = 45, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(rslt.stk, aes(x = variable, y = capy, fill = value)) +
geom_tile() +
scale_fill_viridis_c(begin = 0.15, end = 0.85, option = "A") +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.text.x = element_text(angle = 45, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
save.image("~/Desktop/Morris Lab/Manuscripts/Capybara/error evaluation/Simulation Study Notebook/111920_final_simulation_intermed_multi_unknown_workspace.RData")
ref.lsk <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/LARRY Dataset/in vitro/lsk_reference_wo_undifferentiated.Rds")
ref.df.lsk <- ref.lsk[[3]]
ref.sc.lsk <- ref.lsk[[1]]
View(ref.df.lsk)
ref.meta.lsk <- ref.lsk[[2]]
View(ref.meta.lsk)
library(Seurat)
library(dplyr)
library(patchwork)
library(ggplot2)
library(ggpubr)
library(viridis)
dox <- Read10X("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Dox_RA/filtered_feature_bc_matrix/")
dox.ra.sag <- Read10X("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Dox_SAG/filtered_feature_bc_matrix/")
dox.obj <- CreateSeuratObject(counts = dox, project = "mn.dox.ra", min.cells = 3, min.features = 200)
dox.ra.sag.obj <- CreateSeuratObject(counts = dox.ra.sag, project = "mn.dox.sag", min.cells = 3, min.features = 200)
dox.obj[["percent.mt"]] <- PercentageFeatureSet(dox.obj, pattern = "^mt-")
dox.ra.sag.obj[["percent.mt"]] <- PercentageFeatureSet(dox.ra.sag.obj, pattern = "^mt-")
VlnPlot(dox.obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(dox.ra.sag.obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(dox.obj, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(dox.ra.sag.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(dox.ra.sag.obj, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(dox.ra.sag.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
dox.obj <- subset(dox.obj, subset = nFeature_RNA > 1000 & nFeature_RNA < 7000 & percent.mt <= 15)
dox.ra.sag.obj <- subset(dox.ra.sag.obj, subset = nFeature_RNA > 1000 & nFeature_RNA < 7000 & percent.mt <= 15)
dox.obj <- NormalizeData(dox.obj, normalization.method = "LogNormalize", scale.factor = 10000)
dox.ra.sag.obj <- NormalizeData(dox.ra.sag.obj, normalization.method = "LogNormalize", scale.factor = 10000)
dox.obj <- FindVariableFeatures(dox.obj, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(dox.obj), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(dox.obj)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
dox.ra.sag.obj <- FindVariableFeatures(dox.ra.sag.obj, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(dox.ra.sag.obj), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(dox.ra.sag.obj)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(dox.obj)
dox.obj <- ScaleData(dox.obj, features = all.genes, vars.to.regress = c("nCount_RNA", "percent.mt"))
all.genes <- rownames(dox.ra.sag.obj)
dox.ra.sag.obj <- ScaleData(dox.ra.sag.obj, features = all.genes, vars.to.regress = c("nCount_RNA", "percent.mt"))
dox.obj <- RunPCA(dox.obj, features = VariableFeatures(object = dox.obj))
dox.ra.sag.obj <- RunPCA(dox.ra.sag.obj, features = VariableFeatures(object = dox.ra.sag.obj))
VizDimLoadings(dox.obj, dims = 1:2, reduction = "pca")
DimPlot(dox.obj, reduction = "pca")
DimHeatmap(dox.obj, dims = 1:15, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
dox.obj <- JackStraw(dox.obj, num.replicate = 100)
dox.obj <- ScoreJackStraw(dox.obj, dims = 1:20)
JackStrawPlot(dox.obj, dims = 1:20)
ElbowPlot(dox.obj)
VizDimLoadings(dox.ra.sag.obj, dims = 1:2, reduction = "pca")
DimHeatmap(dox.ra.sag.obj, dims = 1:15, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
dox.ra.sag.obj <- JackStraw(dox.ra.sag.obj, num.replicate = 100)
dox.ra.sag.obj <- ScoreJackStraw(dox.ra.sag.obj, dims = 1:20)
JackStrawPlot(dox.ra.sag.obj, dims = 1:20)
ElbowPlot(dox.ra.sag.obj)
dox.obj <- FindNeighbors(dox.obj, dims = 1:17)
dox.ra.sag.obj <- FindNeighbors(dox.ra.sag.obj, dims = 1:17)
dox.obj <- FindClusters(dox.obj, resolution = 0.8)
dox.ra.sag.obj <- FindClusters(dox.ra.sag.obj, resolution = 0.8)
dox.obj <- RunUMAP(dox.obj, dims = 1:17)
dox.ra.sag.obj <- RunUMAP(dox.ra.sag.obj, dims = 1:17)
DimPlot(dox.obj, reduction = "umap", label = T, label.size = 12)
DimPlot(dox.ra.sag.obj, reduction = "umap", label = T, label.size = 12)
FeaturePlot(dox.obj, features = c("Pou5f1", "Nanog", "Esrrb"), reduction = "umap")
FeaturePlot(dox.ra.sag.obj, features = c("Pou5f1", "Nanog", "Esrrb"), reduction = "umap")
FeaturePlot(dox.obj, features = c("Tubb3", "Map2", "Mnx1", "Isl1", "Lhx3", "Nefl", "Nefm", "Slit2","Onecut2"), reduction = "umap")
FeaturePlot(dox.ra.sag.obj, features = c("Tubb3", "Map2", "Mnx1", "Isl1", "Lhx3", "Nefl", "Nefm", "Slit2", "Onecut2"), reduction = "umap")
dox.marker <- FindAllMarkers(dox.obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
dox.marker %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
dox.ra.sag.marker <- FindAllMarkers(dox.ra.sag.obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
dox.ra.sag.marker %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
FeaturePlot(dox.obj, features = c("nCount_RNA", "percent.mito"), reduction = "umap")
FeaturePlot(dox.ra.sag.obj, features = c("nCount_RNA", "percent.mito"), reduction = "umap")
FeaturePlot(dox.obj, features = c("nCount_RNA", "percent.mt"), reduction = "umap")
FeaturePlot(dox.ra.sag.obj, features = c("nCount_RNA", "percent.mt"), reduction = "umap")
marker.read <- readLines("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/TableS2.csv")
marker.read.region <- unlist(lapply(strsplit(marker.read, ";"), function(x) x[1]))
marker.read.gm_id <- unlist(lapply(strsplit(marker.read, ";"), function(x) x[2]))
marker.read.gene <- unlist(lapply(strsplit(marker.read, ";"), function(x) x[3]))
marker.df <- data.frame(marker.read.region, marker.read.gm_id, marker.read.gene, stringsAsFactors = F)
cnms <- marker.df[1,]
marker.df <- marker.df[-c(1), ]
colnames(marker.df) <- cnms
gene.list.construct <- list()
unique.region <- unique(marker.df$domain)
for (i in 1:length(unique.region)) {
curr.region <- unique.region[i]
curr.sub <- marker.df[which(marker.df$domain == curr.region), ]
curr.gene.list <- curr.sub$Genes
curr.gene.list <- unique(unlist(lapply(strsplit(curr.gene.list, ", "), function(x) x)))
gene.list.construct[[curr.region]] <- curr.gene.list
}
dox.obj <- AddModuleScore(dox.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl1")
dox.obj <- AddModuleScore(dox.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl2")
dox.obj <- AddModuleScore(dox.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl3")
dox.obj <- AddModuleScore(dox.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl4")
dox.obj <- AddModuleScore(dox.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl5")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$dl1, gene.list.construct$dl2,
gene.list.construct$dl3, gene.list.construct$dl4,
gene.list.construct$dl5)), ctrl = 5, name = "dorsal_features")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V0)), ctrl = 5, name = "V0")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V1)), ctrl = 5, name = "V1")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V2a)), ctrl = 5, name = "V2a")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V2b)), ctrl = 5, name = "V2b")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V3)), ctrl = 5, name = "V3")
dox.obj <- AddModuleScore(dox.obj, features = list(c(gene.list.construct$V3)), ctrl = 5, name = "MN")
FeaturePlot(dox.obj, features = c("dorsal_features1", "dl11", "dl21", "dl31", "dl41", "dl51"))
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl1")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl2")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl3")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl4")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(gene.list.construct$dl1), ctrl = 5, name = "dl5")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$dl1, gene.list.construct$dl2,
gene.list.construct$dl3, gene.list.construct$dl4,
gene.list.construct$dl5)), ctrl = 5, name = "dorsal_features")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V0)), ctrl = 5, name = "V0")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V1)), ctrl = 5, name = "V1")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V2a)), ctrl = 5, name = "V2a")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V2b)), ctrl = 5, name = "V2b")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V3)), ctrl = 5, name = "V3")
dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V3)), ctrl = 5, name = "MN")
FeaturePlot(dox.ra.sag.obj, features = c("dorsal_features1", "dl11", "dl21", "dl31", "dl41", "dl51"))
dox.meta <- dox.obj@meta.data
dox.ra.sag.meta <- dox.ra.sag.obj@meta.data
dox.meta$category <- "Dox Only"
dox.ra.sag.meta$category <- "Dox RA SAG"
meta.all <- rbind(dox.meta, dox.ra.sag.meta)
meta.all.sub <- meta.all[,c(8:20)]
dox.meta <- dox.obj@meta.data
dox.ra.sag.meta <- dox.ra.sag.obj@meta.data
dox.meta$category <- "Dox + RA"
dox.ra.sag.meta$category <- "Dox + SAG"
meta.all <- rbind(dox.meta, dox.ra.sag.meta)
meta.all.sub <- meta.all[,c(7:19)]
meta.all.sub.melt <- reshape2::melt(meta.all.sub[,c(6:13)])
## Ref: https://stackoverflow.com/questions/17319487/median-and-quartile-on-violin-plots-in-ggplot2
median.quartile <- function(x){
out <- quantile(x, probs = c(0.25,0.5,0.75))
names(out) <- c("ymin","y","ymax")
return(out)
}
cs <- viridis(20)
ggplot(meta.all.sub.melt, aes(x = variable, y = value, fill = category)) +
geom_boxplot() +
scale_fill_viridis_d(option = "A", begin = 0.5, end = 0.9)
ggplot(meta.all.sub, aes(x = category, y = dorsal_features1, fill = category)) +
geom_violin(trim = T) +
scale_fill_viridis_d(option = "A", begin = 0.5, end = 0.9) +
stat_summary(fun.y=median.quartile,geom='point', color = rep(cs[c(20,1)], each = 3)) +
stat_summary(fun.y=median.quartile,geom='line', color = rep(cs[c(20,1)], each = 3)) +
stat_compare_means(label =  "p.signif", label.x = 1.5)
save.image("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Reprogrammed_mapped/112220_Dox_with_ra_or_sag_workspace.RData")
saveRDS(dox.obj, "~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/dox_ra_seurat.Rds")
saveRDS(dox.ra.sag.obj, "~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/dox_sag_seurat.Rds")
library(CellTagR)
test.obj <- readRDS("~/Desktop/Morris Lab/CellTagR Edit/filtered_celltag_obj.Rds")
CellTagDataForCollapsing(test.obj, "~/Desktop/collpasing.txt")
remove.packages("CellTagR")
devtools::install_github("morris-lab/CellTagR")
library(CellTagR)
setwd("~/Desktop/")
devtools::install("CellTagR")
library(CellTagR)
test.obj <- readRDS("~/Desktop/Morris Lab/CellTagR Edit/filtered_celltag_obj.Rds")
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
CellTagDataForCollapsing()
CellTagDataForCollapsing
devtools::install("CellTagR")
library(CellTagR)
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
devtools::install("CellTagR")
library(CellTagR)
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
devtools::install("CellTagR")
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
devtools::install("CellTagR")
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
devtools::document()
setwd("CellTagR/")
devtools::document()
GetCellTagCurrentVersionWorkingMatrix <- function(celltag.obj, slot.to.select) {
curr.mtx <- slot(celltag.obj, slot.to.select)
if (nrow(curr.mtx) <= 0) {
return(curr.mtx)
} else {
curr.version <- celltag.obj@curr.version
curr.mtx.sub <- curr.mtx[, which(startsWith(colnames(curr.mtx), curr.version))]
colnames(curr.mtx.sub) <- gsub(pattern = paste0(curr.version, "."), replacement = "", colnames(curr.mtx.sub))
full.mtx.sub <- curr.mtx.sub[Matrix::rowSums(is.na(curr.mtx.sub)) != ncol(curr.mtx.sub),]
return(full.mtx.sub)
}
}
test.obj <- readRDS("~/Desktop/Morris Lab/CellTagR Edit/post_collapsing_hf1_d15.Rds")
test.obj <- SingleCellDataBinatization(test.obj, 2)
celltag.obj <- test.obj
dt.mtx.whitelist.path <- system.file("extdata", "v1_whitelist.csv", package = "CellTagR")
celltag.obj <- SingleCellDataWhitelist(celltag.obj, dt.mtx.whitelist.path)
celltag.obj <- MetricBasedFiltering(celltag.obj, 20, comparison = "less")
celltag.obj <- MetricBasedFiltering(celltag.obj, 2, comparison = "greater")
filtered.whitelised.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "metric.filtered.count")
Jac <- simil(filtered.whitelised.data, method = "Jaccard")
Jac <- proxy::simil(filtered.whitelised.data, method = "Jaccard")
library(Matrix)
install.packages("proxyC")
library(proxyC)
Jac <- proxy::simil(filtered.whitelised.data, method = "Jaccard")
Jac <- proxyC::simil(filtered.whitelised.data, method = "Jaccard")
Jac <- proxyC::simil(filtered.whitelised.data, method = "jaccard")
Jac.2 <- proxy::simil(as.matrix(filtered.whitelised.data), method = "Jaccard")
Jac.2 <- as.matrix(Jac.2)
sum(abs(Jac - Jac.2))
Jac.mtx <- as.matrix(Jac)
sum(abs(Jac.mtx[rownames(Jac.2), colnames(Jac.2)] - Jac.2))
View(Jac.2)
View(Jac.mtx)
diag(Jac.2) <- 1
sum(abs(Jac.mtx[rownames(Jac.2), colnames(Jac.2)] - Jac.2))
as(Jac, "dgCMatrix")
as(Jac, "dgTMatrix")
as(as(Jac, "dgTMatrix"), "dgCMatrix")
devtools::install_github("morris-lab/CellTagR")
JaccardAnalysis
library(CellTagR)
JaccardAnalysis
library(CellTagR)
library(CellTagR)
JaccardAnalysis
remove.packages("CellTagR")
devtools::install_github("morris-lab/CellTagR")
library(CellTagR)
JaccardAnalysis
devtools::document()
rm(list = c("GetCellTagCurrentVersionWorkingMatrix"))
devtools::document()
library(CellTagR)
JaccardAnalysis()
JaccardAnalysis
celltag.obj <- JaccardAnalysis(celltag.obj, fast = T)
celltag.obj.2 <- JaccardAnalysis(celltag.obj)
Jaccard.Matrix <- celltag.obj@jaccard.mtx
# Using the igraph package to facilitate the identification of membership to each clone
jac.summ <- Matrix::summary(Jaccard.Matrix)
lower.tri.summ <- subset(jac.summ, i>=j)
test <- sparseMatrix(i = lower.tri.summ$i,
j = lower.tri.summ$j,
x = lower.tri.summ$x,
dims = dim(Jaccard.Matrix))
test.df <- as.data.frame(Matrix::summary(test))
test.2 <- Jaccard.Matrix * lower.tri(Jaccard.Matrix)
test.df.2 <- as.data.frame(Matrix::summary(test.2))
View(test.2)
View(test.df)
View(test.df.2)
# Using the igraph package to facilitate the identification of membership to each clone
jac.summ <- Matrix::summary(Jaccard.Matrix)
lower.tri.summ <- subset(jac.summ, i>j)
test <- sparseMatrix(i = lower.tri.summ$i,
j = lower.tri.summ$j,
x = lower.tri.summ$x,
dims = dim(Jaccard.Matrix))
test.df <- as.data.frame(Matrix::summary(test))
View(test.df)
View(test.df.2)
sum(abs(test.df$x - test.df.2$x))
devtools::document()
