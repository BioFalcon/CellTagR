cell.same.index <- which(cell.same)
cell.diff.indx <- which(!cell.same)
pb <- txtProgressBar(min = 0, max = length(cell.bc), style = 3)
pb.count <- 0
for (csi in cell.same.index) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[csi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- cell.ct[csi]
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count, stringsAsFactors = F)
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
for (cdi in cell.diff.indx) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[cdi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.ct <- cell.ct[cdi]
curr.bc <- cell.bc[cdi]
same.concat <- curr.collapse.set[which(endsWith(curr.collapse.set, curr.bc))]
curr.to.collapse <- setdiff(same.concat, curr.centroid)
if (length(curr.to.collapse) > 0) {
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count.new, stringsAsFactors = F)
}else {
curr.new.row <- new.collapsing.df[same.concat, c("concat", "CellTag", "value")]
}
curr.diff.rows <- new.collapsing.df[setdiff(curr.collapse.set, same.concat), c("concat", "CellTag", "value")]
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
final.collapsing.df <- rbind(final.collapsing.df, curr.diff.rows)
}
if (length(which(is.na(final.collapsing.df$concat))) > 0) final.collapsing.df <- final.collapsing.df[-which(is.na(final.collapsing.df$concat)), ]
rownames(final.collapsing.df) <- final.collapsing.df$concat
final.collapsing.df <- cbind(final.collapsing.df, collapsing[rownames(final.collapsing.df), c("Cell.Barcode", "concat")])
if (nrow(ultimate.collapsing.df) <= 0) {
ultimate.collapsing.df <- final.collapsing.df
} else {
ultimate.collapsing.df <- rbind(ultimate.collapsing.df, final.collapsing.df)
}
ultimate.collapsing.df <- data.frame()
if (nrow(ultimate.collapsing.df) <= 0) {
ultimate.collapsing.df <- final.collapsing.df
} else {
ultimate.collapsing.df <- rbind(ultimate.collapsing.df, final.collapsing.df)
}
rownames(ultimate.collapsing.df) <- NULL
View(ultimate.collapsing.df)
i <- 2
close(pb)
final.collapsing.df <- data.frame()
# Process this one by one
curr.file.dir <- collapsed.rslt.file[i]
# Read in the collpased result
collapsed <- read.table(curr.file.dir, sep = "\t", header = F, stringsAsFactors = F)
# Read in the file for collapsing
if (length(collapsed.rslt.file) > 1) {
curr.sample.parts <- strsplit(basename(curr.file.dir), "_")[[1]]
curr.sample <- strsplit(curr.sample.parts[length(curr.sample.parts)], "[.]")[[1]][1]
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
collapsing <- collapsing[which(startsWith(collapsing$X2, curr.sample)), ]
} else {
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
}
rownames(collapsing) <- collapsing$concat
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
cell.bc <- substring(collapsed$V1, 9)
cell.ct <- substring(collapsed$V1, 1, 8)
cell.same <- apply(collapsed, 1,
function(x) {
cell.bc <- substring(x[1], 9)
cell.subset <- strsplit(x[3], ",")[[1]]
return(all(endsWith(cell.subset, cell.bc)))
})
cell.same.index <- which(cell.same)
cell.diff.indx <- which(!cell.same)
pb <- txtProgressBar(min = 0, max = length(cell.bc), style = 3)
pb.count <- 0
for (csi in cell.same.index) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[csi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- cell.ct[csi]
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count, stringsAsFactors = F)
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
for (cdi in cell.diff.indx) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[cdi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.ct <- cell.ct[cdi]
curr.bc <- cell.bc[cdi]
same.concat <- curr.collapse.set[which(endsWith(curr.collapse.set, curr.bc))]
curr.to.collapse <- setdiff(same.concat, curr.centroid)
if (length(curr.to.collapse) > 0) {
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count.new, stringsAsFactors = F)
}else {
curr.new.row <- new.collapsing.df[same.concat, c("concat", "CellTag", "value")]
}
curr.diff.rows <- new.collapsing.df[setdiff(curr.collapse.set, same.concat), c("concat", "CellTag", "value")]
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
final.collapsing.df <- rbind(final.collapsing.df, curr.diff.rows)
}
if (length(which(is.na(final.collapsing.df$concat))) > 0) final.collapsing.df <- final.collapsing.df[-which(is.na(final.collapsing.df$concat)), ]
rownames(final.collapsing.df) <- final.collapsing.df$concat
final.collapsing.df <- cbind(final.collapsing.df, collapsing[rownames(final.collapsing.df), c("Cell.Barcode", "concat")])
if (nrow(ultimate.collapsing.df) <= 0) {
ultimate.collapsing.df <- final.collapsing.df
} else {
ultimate.collapsing.df <- rbind(ultimate.collapsing.df, final.collapsing.df)
}
View(ultimate.collapsing.df)
rownames(ultimate.collapsing.df) <- NULL
close(pb)
ultimate.collapsing.df <- setDT(ultimate.collapsing.df)
# Regenerate the new matrix
new.matrix <- dcast(ultimate.collapsing.df, Cell.Barcode~CellTag, fill = 0)
# Give the matrix rownames
cell.rnm <- new.matrix$Cell.Barcode
cnms <- colnames(new.matrix)[2:ncol(new.matrix)]
new.matrix <- as.matrix(new.matrix[, ..cnms])
rownames(new.matrix) <- cell.rnm
View(umi.matrix)
colnames(umi.matrix)
rownames(umi.matrix)
celltag.obj.test.combin <- CellTagDataPostCollapsing(celltag.obj.test.combin, list.files("~/Desktop/Morris Lab/UMI/collapsing_rslt/", full.names = T))
list.files("~/Desktop/Morris Lab/UMI/collapsing_rslt/", full.names = T)
celltag.obj.test.combin <- CellTagDataPostCollapsing(celltag.obj.test.combin, collapsed.rslt.file = list.files("~/Desktop/Morris Lab/UMI/collapsing_rslt", full.names = T))
collapsed.rslt.file <- list.files("~/Desktop/Morris Lab/UMI/collapsing_rslt/", full.names = T)
i <-
1
ultimate.collapsing.df <- data.frame()
print(paste0("Processing ", curr.file.dir, "\n"))
final.collapsing.df <- data.frame()
# Process this one by one
curr.file.dir <- collapsed.rslt.file[i]
# Read in the collpased result
collapsed <- read.table(curr.file.dir, sep = "\t", header = F, stringsAsFactors = F)
for (i in 1:length(collapsed.rslt.file)) {
print(paste0("Processing ", curr.file.dir, "\n"))
final.collapsing.df <- data.frame()
# Process this one by one
curr.file.dir <- collapsed.rslt.file[i]
# Read in the collpased result
collapsed <- read.table(curr.file.dir, sep = "\t", header = F, stringsAsFactors = F)
# Read in the file for collapsing
if (length(collapsed.rslt.file) > 1) {
curr.sample.parts <- strsplit(basename(curr.file.dir), "_")[[1]]
curr.sample <- strsplit(curr.sample.parts[length(curr.sample.parts)], "[.]")[[1]][1]
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
collapsing <- collapsing[which(startsWith(collapsing$X2, curr.sample)), ]
} else {
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
}
rownames(collapsing) <- collapsing$concat
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
cell.bc <- substring(collapsed$V1, 9)
cell.ct <- substring(collapsed$V1, 1, 8)
cell.same <- apply(collapsed, 1,
function(x) {
cell.bc <- substring(x[1], 9)
cell.subset <- strsplit(x[3], ",")[[1]]
return(all(endsWith(cell.subset, cell.bc)))
})
cell.same.index <- which(cell.same)
cell.diff.indx <- which(!cell.same)
pb <- txtProgressBar(min = 0, max = length(cell.bc), style = 3)
pb.count <- 0
for (csi in cell.same.index) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[csi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- cell.ct[csi]
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count, stringsAsFactors = F)
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
for (cdi in cell.diff.indx) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[cdi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.ct <- cell.ct[cdi]
curr.bc <- cell.bc[cdi]
same.concat <- curr.collapse.set[which(endsWith(curr.collapse.set, curr.bc))]
curr.to.collapse <- setdiff(same.concat, curr.centroid)
if (length(curr.to.collapse) > 0) {
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count.new, stringsAsFactors = F)
}else {
curr.new.row <- new.collapsing.df[same.concat, c("concat", "CellTag", "value")]
}
curr.diff.rows <- new.collapsing.df[setdiff(curr.collapse.set, same.concat), c("concat", "CellTag", "value")]
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
final.collapsing.df <- rbind(final.collapsing.df, curr.diff.rows)
}
if (length(which(is.na(final.collapsing.df$concat))) > 0) final.collapsing.df <- final.collapsing.df[-which(is.na(final.collapsing.df$concat)), ]
rownames(final.collapsing.df) <- final.collapsing.df$concat
final.collapsing.df <- cbind(final.collapsing.df, collapsing[rownames(final.collapsing.df), c("Cell.Barcode", "concat")])
if (nrow(ultimate.collapsing.df) <= 0) {
ultimate.collapsing.df <- final.collapsing.df
} else {
ultimate.collapsing.df <- rbind(ultimate.collapsing.df, final.collapsing.df)
}
rownames(ultimate.collapsing.df) <- NULL
close(pb)
}
rslt.files <- list.files("~/Desktop/Morris Lab/UMI/collapsing_rslt", full.names = T)
celltag.obj.test.combin <- CellTagDataPostCollapsing(celltag.obj.test.combin, collapsed.rslt.file = rslt.files)
celltag.obj.test.combin
celltag.obj <- celltag.obj.test.combin
#'
#' This function processes the result generated from starcode - https://github.com/gui11aume/starcode.
#' @param celltag.obj A CellTag object with the pre-starcode mapping matrix filled.
#' @param collapsed.rslt.file File path to the collapsed result file
#' @return A CellTag object with collapsed count matrix stored in collapsed.count slot
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' CellTagDataPostCollapsing(bam.test.obj, "./collapsing_result.txt")
#'
CellTagDataPostCollapsing <- function(celltag.obj, collapsed.rslt.file) {
ultimate.collapsing.df <- data.frame()
for (i in 1:length(collapsed.rslt.file)) {
print(paste0("Processing ", curr.file.dir))
final.collapsing.df <- data.frame()
# Process this one by one
curr.file.dir <- collapsed.rslt.file[i]
# Read in the collpased result
collapsed <- read.table(curr.file.dir, sep = "\t", header = F, stringsAsFactors = F)
# Read in the file for collapsing
if (length(collapsed.rslt.file) > 1) {
curr.sample.parts <- strsplit(basename(curr.file.dir), "_")[[1]]
curr.sample <- strsplit(curr.sample.parts[length(curr.sample.parts)], "[.]")[[1]][1]
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
collapsing <- collapsing[which(startsWith(collapsing$X2, curr.sample)), ]
} else {
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
}
rownames(collapsing) <- collapsing$concat
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
cell.bc <- substring(collapsed$V1, 9)
cell.ct <- substring(collapsed$V1, 1, 8)
cell.same <- apply(collapsed, 1,
function(x) {
cell.bc <- substring(x[1], 9)
cell.subset <- strsplit(x[3], ",")[[1]]
return(all(endsWith(cell.subset, cell.bc)))
})
cell.same.index <- which(cell.same)
cell.diff.indx <- which(!cell.same)
pb <- txtProgressBar(min = 0, max = length(cell.bc), style = 3)
pb.count <- 0
for (csi in cell.same.index) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[csi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- cell.ct[csi]
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count, stringsAsFactors = F)
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
for (cdi in cell.diff.indx) {
pb.count <- pb.count + 1
setTxtProgressBar(pb, pb.count)
curr.row <- collapsed[cdi,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.ct <- cell.ct[cdi]
curr.bc <- cell.bc[cdi]
same.concat <- curr.collapse.set[which(endsWith(curr.collapse.set, curr.bc))]
curr.to.collapse <- setdiff(same.concat, curr.centroid)
if (length(curr.to.collapse) > 0) {
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(row.names = curr.centroid, concat = curr.centroid, CellTag = curr.ct,
value = curr.count.new, stringsAsFactors = F)
}else {
curr.new.row <- new.collapsing.df[same.concat, c("concat", "CellTag", "value")]
}
curr.diff.rows <- new.collapsing.df[setdiff(curr.collapse.set, same.concat), c("concat", "CellTag", "value")]
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
final.collapsing.df <- rbind(final.collapsing.df, curr.diff.rows)
}
if (length(which(is.na(final.collapsing.df$concat))) > 0) final.collapsing.df <- final.collapsing.df[-which(is.na(final.collapsing.df$concat)), ]
rownames(final.collapsing.df) <- final.collapsing.df$concat
final.collapsing.df <- cbind(final.collapsing.df, collapsing[rownames(final.collapsing.df), c("Cell.Barcode", "concat")])
if (nrow(ultimate.collapsing.df) <= 0) {
ultimate.collapsing.df <- final.collapsing.df
} else {
ultimate.collapsing.df <- rbind(ultimate.collapsing.df, final.collapsing.df)
}
rownames(ultimate.collapsing.df) <- NULL
close(pb)
}
ultimate.collapsing.df <- setDT(ultimate.collapsing.df)
# Regenerate the new matrix
new.matrix <- dcast(ultimate.collapsing.df, Cell.Barcode~CellTag, fill = 0)
# Give the matrix rownames
cell.rnm <- new.matrix$Cell.Barcode
cnms <- colnames(new.matrix)[2:ncol(new.matrix)]
new.matrix <- as.matrix(new.matrix[, ..cnms])
rownames(new.matrix) <- cell.rnm
# Save the new matrix to the object
new.obj <- SetCellTagCurrentVersionWorkingMatrix(celltag.obj, "collapsed.count", as(new.matrix, "dgCMatrix"))
return(new.obj)
}
celltag.obj.test.combin <- CellTagDataPostCollapsing(celltag.obj.test.combin, collapsed.rslt.file = rslt.files)
SetCellTagCurrentVersionWorkingMatrix <- function(celltag.obj, slot.to.set, final.to.set) {
cop.final <- final.to.set
colnames(cop.final) <- paste0(celltag.obj@curr.version, ".", colnames(cop.final))
curr.version.existing.mtx <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, slot.to.set)
if (sum(dim(slot(celltag.obj, slot.to.set))) <= 0) {
slot(celltag.obj, slot.to.set) <- cop.final
} else  {
curr.existing.mtx <- slot(celltag.obj, slot.to.set)
if (ncol(curr.version.existing.mtx) > 0) {
curr.ver.exist.colnames <- paste0(celltag.obj@curr.version, ".", colnames(curr.version.existing.mtx))
indx <- which(colnames(curr.existing.mtx) %in% curr.ver.exist.colnames)
curr.existing.mtx <- curr.existing.mtx[, -indx]
}
new.rownames <- unique(c(rownames(curr.existing.mtx), rownames(cop.final)))
diff.rnms <- setdiff(new.rownames, rownames(cop.final))
cop.comp.mtx <- matrix(NA, nrow = length(diff.rnms), ncol = ncol(cop.final))
rownames(cop.comp.mtx) <- diff.rnms
colnames(cop.comp.mtx) <- colnames(cop.final)
diff.rnms.2 <- setdiff(new.rownames, rownames(curr.existing.mtx))
cem.comp.mtx <- matrix(NA, nrow = length(diff.rnms.2), ncol = ncol(curr.existing.mtx))
rownames(cem.comp.mtx) <- diff.rnms.2
colnames(cem.comp.mtx) <- colnames(curr.existing.mtx)
to.merge.mtx.cop <- rbind(cop.final, cop.comp.mtx)
to.merge.mtx.cem <- rbind(curr.existing.mtx, cem.comp.mtx)
new.mtx <- cbind(to.merge.mtx.cem, to.merge.mtx.cop)
slot(celltag.obj, slot.to.set) <- new.mtx
}
return(celltag.obj)
}
celltag.obj.test.combin <- CellTagDataPostCollapsing(celltag.obj.test.combin, collapsed.rslt.file = rslt.files)
head(celltag.obj.test.combin@collapsed.count)
tail(celltag.obj.test.combin@collapsed.count)
celltag.obj <- celltag.obj.test.combin
tag.cutoff <- 2
obj.collapsed.count <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "collapsed.count")
if (sum(dim(obj.collapsed.count)) <= 0) {
CellTags <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
} else {
CellTags <- obj.collapsed.count
}
sample.1 <- CellTags[which(startsWith(rownames(CellTags), "Sample-1")), ]
sample.2 <- CellTags[which(startsWith(rownames(CellTags), "Sample-2")), ]
#'
#' This function binarize the single-cell celltag data based on a given cutoff. It will generate a binary matrix, which will be stored as a slot in the CellTag Object. The binary matrix will be further used for future processing of the single-cell data.
#' @param celltag.obj A CellTag object with the raw count matrix generated
#' @param tag.cutoff How many tags would you like to be used as a cutoff to say that the cells are tagged?
#' @return A CellTag object with the attribute (binary.mtx) filled.
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' SingleCellDataBinatization(bam.test.obj, 2)
#'
SingleCellDataBinatization <- function(celltag.obj, tag.cutoff) {
obj.collapsed.count <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "collapsed.count")
if (sum(dim(obj.collapsed.count)) <= 0) {
CellTags <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
} else {
CellTags <- obj.collapsed.count
}
CellTags[CellTags < tag.cutoff] <- 0
CellTags[CellTags > 0] <- 1
new.obj <- SetCellTagCurrentVersionWorkingMatrix(celltag.obj, "binary.mtx", as(CellTags, "dgCMatrix"))
return(new.obj)
}
celltag.obj.test.combin <- SingleCellDataBinatization(celltag.obj.test.combin, 2)
celltag.obj.test.combin@binary.mtx
file_test(
"~/Desktop/03_Brain_Postnatal_Bulk_rpkm_gene_quant_scale.csv"
)
file_test("-f", "~/Desktop/03_Brain_Postnatal_Bulk_rpkm_gene_quant_scale.csv")
file_test("-f", "~/Desktop/")
remove.packages("CellTagR")
library(roxygen2)
library(devtools)
setwd("~/Desktop/Morris Lab/CellTagR/")
devtools::install("CellTagR")
devtools::install("../CellTagR")
library(CellTagR)
library(CellTagR)
barcode.aggregate <- function(file.list, output.file) {
final.bc <- c()
for (i in 1:length(file.list)) {
curr.prefix <- paste0("Sample-", i, "_")
curr.file <- file.list[[i]]
curr.bc <- read.table(curr.file, header = F, stringsAsFactors = F)
bc.to.save <- paste0(curr.prefix, curr.bc[,1])
final.bc <- c(final.bc, bc.to.save)
}
write.table(as.data.frame(final.bc), output.file, sep = "\t", row.names = F, col.names = F, quote = F)
}
file.list <- list("~/Desktop/Morris Lab/UMI/iep.tc1.tp0.dge.clean.200.genes.sum.txt", "~/Desktop/Morris Lab/UMI/iep.tc1.tp1.dge.clean.200.genes.sum.txt")
final.bc <- c()
for (i in 1:length(file.list)) {
curr.prefix <- paste0("Sample-", i, "_")
curr.file <- file.list[[i]]
curr.bc <- read.table(curr.file, header = F, stringsAsFactors = F)
bc.to.save <- paste0(curr.prefix, curr.bc[,1])
final.bc <- c(final.bc, bc.to.save)
}
grep("[ATCG]+", curr.bc$V1)
grep("[ATCG]+", curr.bc$V1)
curr.bc$V1[1]
grep("[ATCG]", curr.bc$V1)
grep("[ATCG]", curr.bc$V1[1])
?grep
regexpr("[ATCG]+", curr.bc$V1, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
regexpr("(^[ATGC]+$)", curr.bc$V1, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
regexpr("[^ATCG]", curr.bc$V1, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
grep("[^ATCG]", curr.bc$V1, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
grepl("[^ATCG]", curr.bc$V1, ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
library(Seurat)
?FindVariableFeatures
