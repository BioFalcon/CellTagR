mean(CellTags.frequency.whitelisted.pf)
plot(CellTags.frequency.whitelisted.pf)
CellTags.per.cell.whitelisted.pf <- as.data.frame(CellTags.per.cell.whitelisted.pf)
cell.filter.20 <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf<21)
cell.filter.20 <- row.names(cell.filter.20)
celltags.whitelisted <- t(celltags.whitelisted)
celltags.whitelisted <- as.data.frame(celltags.whitelisted)
celltags.whitelisted.2 <- celltags.whitelisted[cell.filter.20]
celltags.whitelisted.2 <- t(celltags.whitelisted.2)
CellTags.per.cell.whitelisted.pf <- rowSums(celltags.whitelisted.2)
mean(CellTags.per.cell.whitelisted.pf)
plot(CellTags.per.cell.whitelisted.pf)
CellTags.frequency.whitelisted.pf <- colSums(celltags.whitelisted.2)
mean(CellTags.frequency.whitelisted.pf)
plot(CellTags.frequency.whitelisted.pf)
CellTags.per.cell.whitelisted.pf <- as.data.frame(CellTags.per.cell.whitelisted.pf)
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf>1)
cell.filter <- row.names(cell.filter)
celltags.whitelisted.2 <- t(celltags.whitelisted.2)
celltags.whitelisted.2 <- as.data.frame(celltags.whitelisted.2)
celltags.whitelisted.3 <- celltags.whitelisted.2[cell.filter]
celltags.whitelisted.3 <- t(celltags.whitelisted.3)
CellTags.per.cell.whitelisted.pf <- rowSums(celltags.whitelisted.3)
mean(CellTags.per.cell.whitelisted.pf)
plot(CellTags.per.cell.whitelisted.pf)
CellTags.frequency.whitelisted.pf <- colSums(celltags.whitelisted.3)
mean(CellTags.frequency.whitelisted.pf)
plot(CellTags.frequency.whitelisted.pf)
library(reshape)
filtered.names <- row.names(celltags.whitelisted.3)
for.collapse <- combo.umi.mat.10[filtered.names,]
combo.umi.mat.10 <- as.matrix(CellTags)
filtered.names <- row.names(celltags.whitelisted.3)
for.collapse.1 <- combo.umi.mat.10[filtered.names,]
rownames(combo.umi.mat.10)
combo.umi.mat.10 <- t(as.matrix(CellTags))
for.collapse.1 <- combo.umi.mat.10[filtered.names,]
for.collapse.1 <- as.matrix(for.collapse)
for.collapse.1 <- melt(for.collapse)
View(for.collapse.1)
combo.umi.mat.10 <- t(as.matrix(hf2.v1.collapsed.no1))
rownames(combo.umi.mat.10)
combo.umi.mat.10 <- as.matrix(hf2.v1.collapsed.no1)
for.collapse.1 <- combo.umi.mat.10[filtered.names,]
for.collapse.1 <- as.matrix(for.collapse)
filtered.names <- row.names(celltags.whitelisted.3)
for.collapse.1 <- combo.umi.mat.10[filtered.names,]
for.collapse.1 <- as.matrix(for.collapse.1)
for.collapse.1 <- melt(for.collapse.1)
for.collapse.1 <- subset(for.collapse.1, value>0)
for.collapse$concat <- paste(for.collapse.1$X1, unlist(lapply(strsplit(for.collapse.1$X2, "-"), function(x) x[1])), sep='')
View(for.collapse.1)
for.collapse$concat <- paste(for.collapse.1$X2, unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])), sep='')
View(for.collapse.1)
strsplit(for.collapse.1$X1, "-")
strsplit(for.collapse.1$X1, "-")
strsplit(for.collapse.1$X1, "[-]")
strsplit(for.collapse.1$X1, "-")
for.collapse.1$X1
for.collapse.1$X1 <- as.character(for.collapse.1$X1)
for.collapse.1$X2 <- as.character(for.collapse.1$X2)
for.collapse$concat <- paste(for.collapse.1$X2, unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])), sep='')
unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1]))
length(unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])))
for.collapse.1$X2
for.collapse$concat <- paste0(for.collapse.1$X2, unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])))
View(for.collapse.1)
paste0(for.collapse.1$X2, unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])))
for.collapse.1$concat <- paste0(for.collapse.1$X2, unlist(lapply(strsplit(for.collapse.1$X1, "-"), function(x) x[1])))
write.csv(for.collapse.1, "~/Desktop/ds.tc2.for.collapse.csv")
collapsed.rslt.file <- "~/Desktop/test_starcode_out.txt"
# Read in the collpased result
collapsed <- read.table(collapsed.rslt.file, sep = "\t", header = F, stringsAsFactors = F)
collapsing <- for.collapse.1
View(collapsing)
colnames(collapsing)[c(2,1)] <- c("CellTag", "Cell.Barcode")
View(collapsing)
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- substring(curr.centroid, 1, 8)
if (curr.count > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
View(final.collapsing.df)
View(collpased.reslt)
View(for.collapse)
celltag.obj <- bam.test.obj
# Get the data out from the CellTag object
umi.matrix <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
for.collapse <- t(as.matrix(umi.matrix))
# Melt the matrix
for.collapse <- melt(for.collapse)
# Subset the matrix to only contain tags with positive UMI numbers
for.collapse <- subset(for.collapse, value > 0)
View(for.collapse)
View(collpased.reslt)
collapsed.rslt.file < "~/Desktop/collapsing_result.txt"
collapsed.rslt.file <- "~/Desktop/collapsing_result.txt"
# Read in the collpased result
collapsed <- read.table(collapsed.rslt.file, sep = "\t", header = F, stringsAsFactors = F)
View(collapsed)
collpasing <- for.collapse
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- substring(curr.centroid, 1, 8)
if (curr.count > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
for.collapse$X1 <- as.character(for.collapse$X1)
for.collapse$X2 <- as.character(for.collapse$X2)
# Create the contatenation column
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
collpasing <- for.collapse
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- substring(curr.centroid, 1, 8)
if (curr.count > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
collapsing <- for.collapse
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.ct <- substring(curr.centroid, 1, 8)
if (curr.count > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
View(final.collapsing.df)
View(for.collapse)
for.collapse.sub <- for.collapse[, c("concat", "value")]
View(for.collapse.sub)
output.file <- "~/Desktop/test_starcode_2.txt"
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
collapsed
collapsed.rslt.file <- "~/Desktop/test_starcode_out_2.txt"
# Read in the collpased result
collapsed <- read.table(collapsed.rslt.file, sep = "\t", header = F, stringsAsFactors = F)
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
View(new.collapsing.df)
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
ind <- which(collapsing$concat == curr.centroid)
curr.new.row <- new.collapsing.df[ind, ]
curr.new.row$value <- curr.count
# if (curr.count > 1) {
#   curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
#   curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
#   for (j in 1:length(curr.to.collapse)) {
#     curr.for.c <- curr.to.collapse[j]
#     curr.for.c.ct <- substring(curr.for.c, 1, 8)
#     if (curr.for.c.ct != curr.ct) {
#       ind <- which(collapsing$concat == curr.to.collapse[j])
#       ind.cent <- which(collapsing$concat == curr.centroid)
#       new.collapsing.df[ind, "concat"] <- curr.centroid
#       new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
#       new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
#     }
#   }
#   curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
#   curr.count.new <- sum(curr.centroid.sub$value)
#   curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
#                              Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
#                              stringsAsFactors = F)
# } else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
#
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
View(final.collapsing.df)
View(collpased.reslt)
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
# ind <- which(collapsing$concat == curr.centroid)
#
# curr.new.row <- new.collapsing.df[ind, ]
# curr.new.row$value <- curr.count
if (length(curr.collapse.set) > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
View(final.collapsing.df)
#' CellTag Starcode Prior Collapsing
#'
#' This function generate the .txt file that will be fed into starcode - https://github.com/gui11aume/starcode - to collapse similar CellTags.
#' @param celltag.obj A CellTag object with the raw count matrix filled.
#' @param output.file The filepath and name to save the table for collapsing (usually a .txt file)
#' @return A CellTag object with collapsing mapping table stored in pre.starcode slot
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' CellTagDataForCollapsing(bam.test.obj, "./collapsing.txt")
#'
CellTagDataForCollapsing <- function(celltag.obj, output.file) {
# Get the data out from the CellTag object
umi.matrix <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
for.collapse <- t(as.matrix(umi.matrix))
# Melt the matrix
for.collapse <- melt(for.collapse)
# Subset the matrix to only contain tags with positive UMI numbers
for.collapse <- subset(for.collapse, value > 0)
for.collapse$X1 <- as.character(for.collapse$X1)
for.collapse$X2 <- as.character(for.collapse$X2)
# Create the contatenation column
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
for.collapse.sub <- for.collapse[, c("concat", "value")]
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
# Set CellTag object
celltag.obj@pre.starcode[[celltag.obj@curr.version]] <- for.collapse
# Print the path saved
cat("The file for collapsing is stored at: ", output.file, "\n")
return(celltag.obj)
}
#' CellTag Starcode Post Collapsing
#'
#' This function processes the result generated from starcode - https://github.com/gui11aume/starcode.
#' @param celltag.obj A CellTag object with the pre-starcode mapping matrix filled.
#' @param collapsed.rslt.file File path to the collapsed result file
#' @return A CellTag object with collapsed count matrix stored in collapsed.count slot
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' CellTagDataPostCollapsing(bam.test.obj, "./collapsing_result.txt")
#'
CellTagDataPostCollapsing <- function(celltag.obj, collapsed.rslt.file) {
# Read in the collpased result
collapsed <- read.table(collapsed.rslt.file, sep = "\t", header = F, stringsAsFactors = F)
# Read in the file for collapsing
collapsing <- celltag.obj@pre.starcode[[celltag.obj@curr.version]]
colnames(collapsing)[c(1:2)] <- c("CellTag", "Cell.Barcode")
new.collapsing.df <- collapsing
final.collapsing.df <- data.frame()
# Process the collapsing data file
for (i in 1:nrow(collapsed)) {
curr.row <- collapsed[i,]
curr.centroid <- curr.row$V1
curr.count <- curr.row$V2
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
# ind <- which(collapsing$concat == curr.centroid)
#
# curr.new.row <- new.collapsing.df[ind, ]
# curr.new.row$value <- curr.count
if (length(curr.collapse.set) > 1) {
curr.collapse.set <- strsplit(curr.row$V3, ",")[[1]]
curr.to.collapse <- setdiff(curr.collapse.set, curr.centroid)
for (j in 1:length(curr.to.collapse)) {
curr.for.c <- curr.to.collapse[j]
curr.for.c.ct <- substring(curr.for.c, 1, 8)
if (curr.for.c.ct != curr.ct) {
ind <- which(collapsing$concat == curr.to.collapse[j])
ind.cent <- which(collapsing$concat == curr.centroid)
new.collapsing.df[ind, "concat"] <- curr.centroid
new.collapsing.df[ind, "CellTag"] <- collapsing[ind.cent[1], "CellTag"]
new.collapsing.df[ind, "Cell.Barcode"] <- collapsing[ind.cent[1], "Cell.Barcode"]
}
}
curr.centroid.sub <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]
curr.count.new <- sum(curr.centroid.sub$value)
curr.new.row <- data.frame(concat = curr.centroid, CellTag = unique(curr.centroid.sub$CellTag),
Cell.Barcode = unique(curr.centroid.sub$Cell.Barcode), value = curr.count.new,
stringsAsFactors = F)
} else {curr.new.row <- new.collapsing.df[which(new.collapsing.df$concat == curr.centroid), ]}
if (nrow(final.collapsing.df) <= 0){
final.collapsing.df <- curr.new.row
} else {
final.collapsing.df <- rbind(final.collapsing.df, curr.new.row)
}
}
final.collapsing.df <- setDT(final.collapsing.df)
# Regenerate the new matrix
new.matrix <- dcast(final.collapsing.df, Cell.Barcode~CellTag, fill = 0)
# Give the matrix rownames
cell.rnm <- new.matrix$Cell.Barcode
cnms <- colnames(new.matrix)[2:ncol(new.matrix)]
new.matrix <- as.matrix(new.matrix[, ..cnms])
rownames(new.matrix) <- cell.rnm
# Save the new matrix to the object
new.obj <- SetCellTagCurrentVersionWorkingMatrix(celltag.obj, "collapsed.count", as(new.matrix, "dgCMatrix"))
return(new.obj)
}
bam.test.obj <- readRDS("~/Desktop/presentation/Demo/demo_object.Rds")
head(bam.test.obj@bam.parse.rslt[["v1"]])
bam.test.obj@celltag.stats
bam.test.obj <- CellTagMatrixCount(celltag.obj = bam.test.obj, barcodes.file = "~/Desktop/presentation/Demo/barcodes.tsv")
dim(bam.test.obj@raw.count)
bam.test.obj <- CellTagDataForCollapsing(celltag.obj = bam.test.obj, output.file = "~/Desktop/collapsing.txt")
bam.test.obj <- CellTagDataPostCollapsing(celltag.obj = bam.test.obj, collapsed.rslt.file = "~/Desktop/test_starcode_out_2.txt")
dim(bam.test.obj@collapsed.count)
bam.test.obj <- SingleCellDataBinatization(bam.test.obj, 2)
MetricPlots(bam.test.obj)
bam.test.obj <- SingleCellDataWhitelist(bam.test.obj, "~/Desktop/Morris Lab/CloneHunter/inst/extdata/v1_whitelist.csv")
dim(bam.test.obj@whitelisted.count)
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 20, comparison = "less")
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 2, comparison = "greater")
dim(bam.test.obj@metric.filtered.count)
MetricPlots(bam.test.obj)
bam.test.obj <- JaccardAnalysis(bam.test.obj)
bam.test.obj <- CloneCalling(celltag.obj = bam.test.obj, correlation.cutoff=0.7)
bam.test.obj@clone.composition[["v1"]]
bam.test.obj@clone.size.info[["v1"]]
library(devtools)
library(roxygen2)
setwd("~/Desktop/Morris Lab/")
create(CellTagR)
create("CellTagR")
create("CellTagR")
create("CellTagR")
setwd("./CellTagR/")
document()
document()
warnings()
document()
remove.packages("CloneHunter")
library(CellTagR)
library(CellTagR)
bam.test.obj <- readRDS("~/Desktop/presentation/Demo/demo_object.Rds")
head(bam.test.obj@bam.parse.rslt[["v1"]])
bam.test.obj@celltag.stats
bam.test.obj <- CellTagMatrixCount(celltag.obj = bam.test.obj, barcodes.file = "~/Desktop/presentation/Demo/barcodes.tsv")
dim(bam.test.obj@raw.count)
bam.test.obj <- CellTagDataForCollapsing(celltag.obj = bam.test.obj, output.file = "~/Desktop/collapsing.txt")
bam.test.obj <- CellTagDataPostCollapsing(celltag.obj = bam.test.obj, collapsed.rslt.file = "~/Desktop/test_starcode_out_2.txt")
bam.test.obj <- CellTagDataPostCollapsing(celltag.obj = bam.test.obj, collapsed.rslt.file = "~/Desktop/test_starcode_out_2.txt")
dim(bam.test.obj@collapsed.count)
bam.test.obj <- SingleCellDataBinatization(bam.test.obj, 2)
MetricPlots(bam.test.obj)
bam.test.obj <- SingleCellDataWhitelist(bam.test.obj, "~/Desktop/Morris Lab/CloneHunter/inst/extdata/v1_whitelist.csv")
dim(bam.test.obj@whitelisted.count)
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 20, comparison = "less")
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 2, comparison = "greater")
dim(bam.test.obj@metric.filtered.count)
MetricPlots(bam.test.obj)
bam.test.obj <- JaccardAnalysis(bam.test.obj)
bam.test.obj <- CloneCalling(celltag.obj = bam.test.obj, correlation.cutoff=0.7)
bam.test.obj@clone.composition[["v1"]]
bam.test.obj@clone.size.info[["v1"]]
document()
remove.packages("CellTagR")
library("devtools")
devtools::install_github("morris-lab/CellTagR")
library(CellTagR)
library(CellTagR)
bam.test.obj <- CellTagObject(object.name = "", fastq.bam.directory = "")
bam.test.obj <- readRDS("~/Desktop/presentation/Demo/demo_object.Rds")
head(bam.test.obj@bam.parse.rslt[["v1"]])
bam.test.obj@celltag.stats
bam.test.obj <- CellTagMatrixCount(celltag.obj = bam.test.obj, barcodes.file = "~/Desktop/presentation/Demo/barcodes.tsv")
dim(bam.test.obj@raw.count)
bam.test.obj <- CellTagDataForCollapsing(celltag.obj = bam.test.obj, output.file = "~/Desktop/collapsing.txt")
bam.test.obj <- CellTagDataPostCollapsing(celltag.obj = bam.test.obj, collapsed.rslt.file = "~/Desktop/test_starcode_out_2.txt")
dim(bam.test.obj@collapsed.count)
bam.test.obj <- SingleCellDataBinatization(bam.test.obj, 2)
MetricPlots(bam.test.obj)
bam.test.obj <- SingleCellDataWhitelist(bam.test.obj, "~/Desktop/Morris Lab/CloneHunter/inst/extdata/v1_whitelist.csv")
dim(bam.test.obj@whitelisted.count)
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 20, comparison = "less")
bam.test.obj <- MetricBasedFiltering(bam.test.obj, 2, comparison = "greater")
dim(bam.test.obj@metric.filtered.count)
MetricPlots(bam.test.obj)
bam.test.obj <- JaccardAnalysis(bam.test.obj)
bam.test.obj <- CloneCalling(celltag.obj = bam.test.obj, correlation.cutoff=0.7)
bam.test.obj@clone.composition[["v1"]]
bam.test.obj@clone.size.info[["v1"]]
