curr.bm <- map.df[which(map.df$tissue == curr.ct), "corresponding"]
}
curr.celltype.perm <- perc_mtx[, curr.bm]
if (length(benchmark) <= 0) {
benchmark[[curr.bm]] <- curr.celltype.perm
} else {
benchmark[[curr.bm]] <- c(benchmark[[curr.bm]], curr.celltype.perm)
}
}
}
bulk = FALSE
for (i in 1:length(ref.perc.ls)) {
curr.cell <- names(ref.perc.ls[[i]])
perc_mtx <- as.data.frame(ref.perc.ls[[i]][[1]])
if (curr.cell %in% rownames(ref.meta)) {
curr.ct <- ref.meta[curr.cell, "cell.type"]
if (endsWith(curr.ct, " ")) curr.ct <- substr(curr.ct, start = 1, stop = (nchar(curr.ct) - 1))
curr.cell.cell.type <- gsub(" ", ".", curr.ct)
curr.cell.cell.type <- gsub("âˆ’", ".", curr.cell.cell.type)
curr.cell.cell.type <- gsub("-", ".", curr.cell.cell.type)
curr.cell.cell.type <- gsub("/", ".", curr.cell.cell.type)
curr.cell.cell.type <- gsub("&", ".", curr.cell.cell.type)
curr.cell.cell.type <- gsub("\\(", ".", curr.cell.cell.type)
curr.cell.cell.type <- gsub("\\)", ".", curr.cell.cell.type)
if (!bulk) {
curr.bm <- paste0("frxn_cell.type_", curr.cell.cell.type)
} else {
if (is.null(map.df)) {
stop("No bulk mapping found!")
}
curr.bm <- map.df[which(map.df$tissue == curr.ct), "corresponding"]
}
curr.celltype.perm <- perc_mtx[, curr.bm]
if (length(benchmark) <= 0) {
benchmark[[curr.bm]] <- curr.celltype.perm
} else {
benchmark[[curr.bm]] <- c(benchmark[[curr.bm]], curr.celltype.perm)
}
}
}
View(benchmark)
for (i in 1:length(benchmark)) {
curr.name <- names(benchmark)[i]
curr.benchmark <- benchmark[[i]]
curr.benchmark <- curr.benchmark[which(curr.benchmark < 1)]
curr.outliers <- boxplot.stats(curr.benchmark)$out
higher.end.outliers <- curr.outliers[which(curr.outliers > getmode(curr.benchmark))]
if (length(higher.end.outliers) > 0) benchmark[[i]] <- curr.benchmark[which(curr.benchmark <= min(higher.end.outliers))]
benchmark.final[curr.name] <- max(benchmark[[i]][which(benchmark[[i]] < 1)])
}
### REF: https://www.tutorialspoint.com/r/r_mean_median_mode.htm
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
for (i in 1:length(benchmark)) {
curr.name <- names(benchmark)[i]
curr.benchmark <- benchmark[[i]]
curr.benchmark <- curr.benchmark[which(curr.benchmark < 1)]
curr.outliers <- boxplot.stats(curr.benchmark)$out
higher.end.outliers <- curr.outliers[which(curr.outliers > getmode(curr.benchmark))]
if (length(higher.end.outliers) > 0) benchmark[[i]] <- curr.benchmark[which(curr.benchmark <= min(higher.end.outliers))]
benchmark.final[curr.name] <- max(benchmark[[i]][which(benchmark[[i]] < 1)])
}
benchmark.final
perc.ls <- perc.list
all.indx <- seq(1,length(perc.ls))
perc.ls <- perc.list.2
all.indx <- seq(1,length(perc.ls))
i <- all.indx[1]
perc_mtx<-as.matrix((perc.ls[[i]][[1]]))
vec<-as.vector(perc_mtx)
View(perc_mtx)
rank<-rank(vec,ties.method = "average")
type_rank<-as.matrix(t(colSums(matrix(rank, nrow=50))))
colnames(type_rank)<-colnames(perc_mtx)
View(perc_mtx)
View(ref.perc.ls)
i <- 1
curr.cell <- names(ref.perc.list[[i]])
perc_mtx <- as.data.frame(ref.perc.list[[i]][[1]])
View(perc_mtx)
cell.type.colmeans <- colMeans(perc_mtx)
cell.type.colmeans <- as.data.frame(colMeans(perc_mtx))
View(cell.type.colmeans)
colnames(cell.type.colmeans) <- curr.cell
cell.type.emp.p.df <- data.frame()
for (i in 1:length(ref.perc.list)) {
curr.cell <- names(ref.perc.list[[i]])
perc_mtx <- as.data.frame(ref.perc.list[[i]][[1]])
cell.type.colmeans <- as.data.frame(colMeans(perc_mtx))
colnames(cell.type.colmeans) <- curr.cell
if (ncol(cell.type.emp.p.df) <= 0) {
cell.type.emp.p.df <- cell.type.colmeans
} else {
cell.type.emp.p.df <- cbind(cell.type.emp.p.df, cell.type.colmeans)
}
}
View(cell.type.emp.p.df)
plot(density(cell.type.emp.p.df[1,]))
cell.type.emp.p.df.t <- t(cell.type.emp.p.df)
View(cell.type.emp.p.df.t)
cell.type.emp.p.df.t <- as.data.frame(t(cell.type.emp.p.df))
plot(density(cell.type.emp.p.df.t$frxn_cell.type_Basal_epithelial_cell.Bladder))
plot(density(cell.type.emp.p.df.t$frxn_cell.type_Endothelial_cell_Ly6c1_high.Bladder))
View(cell.type.emp.p.df.t)
plot(density(cell.type.emp.p.df.t$frxn_cell.type_Epithelial_cell_Upk3a_high.Bladder))
freq.emp.p.1 <- apply(cell.type.emp.p.df.t, 2, function(x) length(which(x==1)))
freq.emp.p.1
freq.emp.p.1/90
1440-90
1350/90
freq.emp.p.2 <- apply(cell.type.emp.p.df.t, 2, function(x) length(which(x<0.1)))
freq.emp.p.2
freq.emp.p.2 <- apply(cell.type.emp.p.df.t, 2, function(x) length(which(x<0.05)))
freq.emp.p.2
freq.emp.p.1/ncol(cell.type.emp.p.df.t)
files.reference <- list.files("~/Box Sync/Morris Lab/Error Evaluation/")
files.reference <- list.files("~/Box Sync/Morris Lab/Error Evaluation/", full.names = T)
files.ref.only <- files.reference[which(endsWith(files.reference, "reference_scale.csv"))]
freq.emp.p.1 <- as.data.frame(apply(cell.type.emp.p.df.t, 2, function(x) length(which(x==1))))
View(freq.emp.p.1)
files.ref.only <- files.reference[which(endsWith(files.reference, "reference_scale.csv"))]
emp.p.all.df <- data.frame()
for (fro in files.ref.only) {
print(fro)
curr.bkg.mtx <- read.csv(fro, header = T, row.names = 1, stringsAsFactors = F)
col.sub <- ncol(curr.bkg.mtx) - 2
curr.ref.perc.list <- percentage.calc(background.mtx[,c(1:col.sub)], background.mtx[,c(1:col.sub)])
cell.type.emp.p.df <- data.frame()
for (i in 1:length(ref.perc.list)) {
curr.cell <- names(ref.perc.list[[i]])
perc_mtx <- as.data.frame(ref.perc.list[[i]][[1]])
cell.type.colmeans <- as.data.frame(colMeans(perc_mtx))
colnames(cell.type.colmeans) <- curr.cell
if (ncol(cell.type.emp.p.df) <= 0) {
cell.type.emp.p.df <- cell.type.colmeans
} else {
cell.type.emp.p.df <- cbind(cell.type.emp.p.df, cell.type.colmeans)
}
}
cell.type.emp.p.df.t <- as.data.frame(t(cell.type.emp.p.df))
freq.emp.p.1 <- as.data.frame(apply(cell.type.emp.p.df.t, 2, function(x) length(which(x==1))))
new.df <- data.frame(freq = freq.emp.p.1[,1], cell.type = rownames(freq.emp.p.1),
total.cell.num = nrow(cell.type.emp.p.df.t), total.cell.type.num = ncol(cell.type.emp.p.df.t),
stringsAsFactors = F)
if (nrow(emp.p.all.df) <= 0) {
emp.p.all.df <- new.df
} else {
emp.p.all.df <- rbind(emp.p.all.df, new.df)
}
}
sample.name <- basename(fro)
sample.name <- strsplit(basename(fro), "[.]")[[1]][1]
files.reference <- list.files("~/Box Sync/Morris Lab/Error Evaluation/", full.names = T)
files.ref.only <- files.reference[which(endsWith(files.reference, "reference_scale.csv"))]
emp.p.all.df <- data.frame()
for (fro in files.ref.only) {
print(fro)
sample.name <- strsplit(basename(fro), "[.]")[[1]][1]
curr.bkg.mtx <- read.csv(fro, header = T, row.names = 1, stringsAsFactors = F)
col.sub <- ncol(curr.bkg.mtx) - 2
curr.ref.perc.list <- percentage.calc(curr.bkg.mtx[,c(1:col.sub)], curr.bkg.mtx[,c(1:col.sub)])
saveRDS(curr.ref.perc.list, paste0("~/Box Sync/Morris Lab/MCA Reference Empirical P/", sample.name, ".Rds"))
cell.type.emp.p.df <- data.frame()
for (i in 1:length(ref.perc.list)) {
curr.cell <- names(ref.perc.list[[i]])
perc_mtx <- as.data.frame(ref.perc.list[[i]][[1]])
cell.type.colmeans <- as.data.frame(colMeans(perc_mtx))
colnames(cell.type.colmeans) <- curr.cell
if (ncol(cell.type.emp.p.df) <= 0) {
cell.type.emp.p.df <- cell.type.colmeans
} else {
cell.type.emp.p.df <- cbind(cell.type.emp.p.df, cell.type.colmeans)
}
}
cell.type.emp.p.df.t <- as.data.frame(t(cell.type.emp.p.df))
freq.emp.p.1 <- as.data.frame(apply(cell.type.emp.p.df.t, 2, function(x) length(which(x==1))))
new.df <- data.frame(freq = freq.emp.p.1[,1], cell.type = rownames(freq.emp.p.1),
total.cell.num = nrow(cell.type.emp.p.df.t), total.cell.type.num = ncol(cell.type.emp.p.df.t),
stringsAsFactors = F)
if (nrow(emp.p.all.df) <= 0) {
emp.p.all.df <- new.df
} else {
emp.p.all.df <- rbind(emp.p.all.df, new.df)
}
}
View(emp.p.all.df)
emp.p.all.df <- data.frame()
rds.emp.p <- list.files("~/Box Sync/Morris Lab/MCA Reference Empirical P/", full.names = T)
for (rds.emp.p.f in rds.emp.p) {
curr.ref.perc.list <- readRDS(rds.emp.p.f)
cell.type.emp.p.df <- data.frame()
for (i in 1:length(curr.ref.perc.list)) {
curr.cell <- names(curr.ref.perc.list[[i]])
perc_mtx <- as.data.frame(curr.ref.perc.list[[i]][[1]])
cell.type.colmeans <- as.data.frame(colMeans(perc_mtx))
colnames(cell.type.colmeans) <- curr.cell
if (ncol(cell.type.emp.p.df) <= 0) {
cell.type.emp.p.df <- cell.type.colmeans
} else {
cell.type.emp.p.df <- cbind(cell.type.emp.p.df, cell.type.colmeans)
}
}
cell.type.emp.p.df.t <- as.data.frame(t(cell.type.emp.p.df))
freq.emp.p.1 <- as.data.frame(apply(cell.type.emp.p.df.t, 2, function(x) length(which(x==1))))
new.df <- data.frame(freq = freq.emp.p.1[,1], cell.type = rownames(freq.emp.p.1),
total.cell.num = nrow(cell.type.emp.p.df.t), total.cell.type.num = ncol(cell.type.emp.p.df.t),
stringsAsFactors = F)
if (nrow(emp.p.all.df) <= 0) {
emp.p.all.df <- new.df
} else {
emp.p.all.df <- rbind(emp.p.all.df, new.df)
}
}
View(emp.p.all.df)
emp.p.all.df$perc <- emp.p.all.df$freq/90
View(emp.p.all.df)
emp.p.all.df$diff <- emp.p.all.df$total.cell.type.num - emp.p.all.df$perc
plot(density(emp.p.all.df))
plot(density(emp.p.all.df$diff))
# Conduct reference randomization to get empirical p-value matrix
ref.perc.list <- percentage.calc(background.mtx[,c(1:col.sub)], background.mtx[,c(1:col.sub)])
col.sub <- ncol(background.mtx) - 2
# Conduct reference randomization to get empirical p-value matrix
ref.perc.list <- percentage.calc(background.mtx[,c(1:col.sub)], background.mtx[,c(1:col.sub)])
bin.count.2 <- binarization.mann.whitney(mtx = mtx.test.2[,c(1:col.sub)], ref.perc.ls = ref.perc.list, ref.meta = ref.meta, perc.ls = perc.list.2)
classification.2 <- binary.to.classification(bin.count.2)
rownames(classification.2) <- classification.2$barcode
View(classification.2)
table(classification.2$call)
meta.mca <- read.csv("~/Box Sync/Morris Lab/Classifier Analysis/Reference datasets/MCA/mca_new_annotation.csv", header = T, stringsAsFactors = F)
curr.meta <- meta.mca[rownames(classification.2), ]
classification.2$mca <- curr.meta$Annotation
View(classification.2)
View(curr.meta)
rownames(meta.mca) <- meta.mca$Cell.name
curr.meta <- meta.mca[rownames(classification.2), ]
classification.2$mca <- curr.meta$Annotation
View(meta.mca)
library(splatter)
params <- newSplatParams()
params
sim.groups <- splatSimulate(group.prob = c(0.5, 0.5), method = "groups",
verbose = FALSE)
sim.groups <- splatSimulate(group.prob = c(0.3, 0.3, 0.4), method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
library(scater)
BiocManager::install("scater")
library(scater)
library(splatter)
library(scater)
library(scater)
BiocManager::install("scater")
BiocManager::install("scater")
library(scater)
library(scater)
library(splatter)
params <- newSplatParams()
params
sim.groups <- splatSimulate(group.prob = c(0.3, 0.3, 0.4), method = "groups",
verbose = FALSE)
counts(sim.groups)
params <- newSplatParams()
params <- setParams(params, update = list(nCells = 1000, nGroups = 10))
params <- newSplatParams()
params <- setParams(params, update = list(batchCells = 1000, nGroups = 10))
params <- setParams(params, update = list(batchCells = 1000, group.prob = rep(0.1, 10)))
params <- newSplatParams()
params <- setParams(params, update = list(batchCells = 1000, group.prob = rep(0.1, 10)))
params
sim.groups <- splatSimulate(params = params, method = "groups")
counts(sim.groups)
library(Seurat)
library(Seurat)
install.packages("Rcpp", type = "source")
install.packages("Rcpp")
library(Seurat)
library(splatter)
library(Capybara)
library(reshape2)
library(CellTagR)
d2.5.rna <- readRDS("~/Desktop/d2_5_rna_pre3.Rds")
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 1, comparison = "greater")
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 20, comparison = "less")
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",])
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",])
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",] == 1)
which(d2.5.rna@whitelisted.count["GCACGGTTCCGATAGT-1",] == 1)
head(d2.5.rna@metric.filtered.count)
d2.5.rna@metric.filtered.count
d2.5.rna <- readRDS("~/Desktop/d2_5_rna_pre3.Rds")
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 20, comparison = "less")
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 1, comparison = "greater")
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",] == 1)
which(d2.5.rna@whitelisted.count["GCACGGTTCCGATAGT-1",] == 1)
MetricBasedFiltering <- function(celltag.obj, cutoff, comparison = "less") {
whitelisted.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "whitelisted.count")
metric.filter.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "metric.filtered.count")
if (ncol(metric.filter.ct.data) <= 0) {
whitelisted.celltag.data <- as.matrix(whitelisted.ct.data)
} else {
whitelisted.celltag.data <- as.matrix(metric.filter.ct.data)
}
# Set up the filtering data frame
CellTags.per.cell.whitelisted.pf <- as.data.frame(Matrix::rowSums(whitelisted.celltag.data))
# Set up the filtered celltag dataset object
if (comparison == "less") {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf <= (cutoff))
} else {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf >= (cutoff))
}
cell.bc.filter <- row.names(cell.filter)
# Filter celltag dataset
celltags.whitelisted.new <- whitelisted.celltag.data[cell.bc.filter, ]
new.obj <- SetCellTagCurrentVersionWorkingMatrix(celltag.obj, "metric.filtered.count", as(celltags.whitelisted.new, "dgCMatrix"))
return(new.obj)
}
GetCellTagCurrentVersionWorkingMatrix <- function(celltag.obj, slot.to.select) {
curr.mtx <- slot(celltag.obj, slot.to.select)
if (nrow(curr.mtx) <= 0) {
return(curr.mtx)
} else {
curr.version <- celltag.obj@curr.version
curr.mtx.sub <- curr.mtx[, which(startsWith(colnames(curr.mtx), curr.version))]
colnames(curr.mtx.sub) <- gsub(pattern = paste0(curr.version, "."), replacement = "", colnames(curr.mtx.sub))
full.mtx.sub <- curr.mtx.sub[Matrix::rowSums(is.na(curr.mtx.sub)) != ncol(curr.mtx.sub),]
return(full.mtx.sub)
}
}
SetCellTagCurrentVersionWorkingMatrix <- function(celltag.obj, slot.to.set, final.to.set) {
cop.final <- final.to.set
colnames(cop.final) <- paste0(celltag.obj@curr.version, ".", colnames(cop.final))
curr.version.existing.mtx <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, slot.to.set)
if (sum(dim(slot(celltag.obj, slot.to.set))) <= 0) {
slot(celltag.obj, slot.to.set) <- cop.final
} else  {
curr.existing.mtx <- slot(celltag.obj, slot.to.set)
if (ncol(curr.version.existing.mtx) > 0) {
curr.ver.exist.colnames <- paste0(celltag.obj@curr.version, ".", colnames(curr.version.existing.mtx))
indx <- which(colnames(curr.existing.mtx) %in% curr.ver.exist.colnames)
curr.existing.mtx <- curr.existing.mtx[, -indx]
}
new.rownames <- unique(c(rownames(curr.existing.mtx), rownames(cop.final)))
diff.rnms <- setdiff(new.rownames, rownames(cop.final))
cop.comp.mtx <- matrix(NA, nrow = length(diff.rnms), ncol = ncol(cop.final))
rownames(cop.comp.mtx) <- diff.rnms
colnames(cop.comp.mtx) <- colnames(cop.final)
diff.rnms.2 <- setdiff(new.rownames, rownames(curr.existing.mtx))
cem.comp.mtx <- matrix(NA, nrow = length(diff.rnms.2), ncol = ncol(curr.existing.mtx))
rownames(cem.comp.mtx) <- diff.rnms.2
colnames(cem.comp.mtx) <- colnames(curr.existing.mtx)
to.merge.mtx.cop <- rbind(cop.final, cop.comp.mtx)
to.merge.mtx.cem <- rbind(curr.existing.mtx, cem.comp.mtx)
new.mtx <- cbind(to.merge.mtx.cem, to.merge.mtx.cop)
slot(celltag.obj, slot.to.set) <- new.mtx
}
return(celltag.obj)
}
d2.5.rna <- readRDS("~/Desktop/d2_5_rna_pre3.Rds")
celltag.obj <- d2.5.rna
cutoff <- 1
comparison <- "greater"
whitelisted.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "whitelisted.count")
metric.filter.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "metric.filtered.count")
if (ncol(metric.filter.ct.data) <= 0) {
whitelisted.celltag.data <- as.matrix(whitelisted.ct.data)
} else {
whitelisted.celltag.data <- as.matrix(metric.filter.ct.data)
}
# Set up the filtering data frame
CellTags.per.cell.whitelisted.pf <- as.data.frame(Matrix::rowSums(whitelisted.celltag.data))
# Set up the filtered celltag dataset object
if (comparison == "less") {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf <= (cutoff))
} else {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf >= (cutoff))
}
cell.bc.filter <- row.names(cell.filter)
# Filter celltag dataset
celltags.whitelisted.new <- whitelisted.celltag.data[cell.bc.filter, ]
which(celltags.whitelisted.new["GCACGGTTCCGATAGT-1",] == 1)
which(celltag.obj@whitelisted.count["GCACGGTTCCGATAGT-1",] == 1)
slot.to.set <- "metric.filtered.count"
final.to.set <- as(celltags.whitelisted.new, "dgCMatrix")
cop.final <- final.to.set
colnames(cop.final) <- paste0(celltag.obj@curr.version, ".", colnames(cop.final))
which(cop.final["GCACGGTTCCGATAGT-1",] == 1)
curr.version.existing.mtx <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, slot.to.set)
if (sum(dim(slot(celltag.obj, slot.to.set))) <= 0) {
slot(celltag.obj, slot.to.set) <- cop.final
} else  {
curr.existing.mtx <- slot(celltag.obj, slot.to.set)
if (ncol(curr.version.existing.mtx) > 0) {
curr.ver.exist.colnames <- paste0(celltag.obj@curr.version, ".", colnames(curr.version.existing.mtx))
indx <- which(colnames(curr.existing.mtx) %in% curr.ver.exist.colnames)
curr.existing.mtx <- curr.existing.mtx[, -indx]
}
new.rownames <- unique(c(rownames(curr.existing.mtx), rownames(cop.final)))
diff.rnms <- setdiff(new.rownames, rownames(cop.final))
cop.comp.mtx <- matrix(NA, nrow = length(diff.rnms), ncol = ncol(cop.final))
rownames(cop.comp.mtx) <- diff.rnms
colnames(cop.comp.mtx) <- colnames(cop.final)
diff.rnms.2 <- setdiff(new.rownames, rownames(curr.existing.mtx))
cem.comp.mtx <- matrix(NA, nrow = length(diff.rnms.2), ncol = ncol(curr.existing.mtx))
rownames(cem.comp.mtx) <- diff.rnms.2
colnames(cem.comp.mtx) <- colnames(curr.existing.mtx)
to.merge.mtx.cop <- rbind(cop.final, cop.comp.mtx)
to.merge.mtx.cem <- rbind(curr.existing.mtx, cem.comp.mtx)
new.mtx <- cbind(to.merge.mtx.cem, to.merge.mtx.cop)
slot(celltag.obj, slot.to.set) <- new.mtx
}
which(celltag.obj@metric.filtered.count["GCACGGTTCCGATAGT-1",] == 1)
which(celltag.obj@whitelisted.count["GCACGGTTCCGATAGT-1",] == 1)
comparison <- "less"
cutoff <- 20
whitelisted.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "whitelisted.count")
metric.filter.ct.data <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "metric.filtered.count")
if (ncol(metric.filter.ct.data) <= 0) {
whitelisted.celltag.data <- as.matrix(whitelisted.ct.data)
} else {
whitelisted.celltag.data <- as.matrix(metric.filter.ct.data)
}
# Set up the filtering data frame
CellTags.per.cell.whitelisted.pf <- as.data.frame(Matrix::rowSums(whitelisted.celltag.data))
# Set up the filtered celltag dataset object
if (comparison == "less") {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf <= (cutoff))
} else {
cell.filter <- subset(CellTags.per.cell.whitelisted.pf, CellTags.per.cell.whitelisted.pf >= (cutoff))
}
cell.bc.filter <- row.names(cell.filter)
# Filter celltag dataset
celltags.whitelisted.new <- whitelisted.celltag.data[cell.bc.filter, ]
which(celltags.whitelisted.new["GCACGGTTCCGATAGT-1",] == 1)
final.to.set <- as(celltags.whitelisted.new, "dgCMatrix")
cop.final <- final.to.set
colnames(cop.final) <- paste0(celltag.obj@curr.version, ".", colnames(cop.final))
curr.version.existing.mtx <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, slot.to.set)
which(cop.final["GCACGGTTCCGATAGT-1",] == 1)
curr.existing.mtx <- slot(celltag.obj, slot.to.set)
ncol(curr.version.existing.mtx)
curr.ver.exist.colnames <- paste0(celltag.obj@curr.version, ".", colnames(curr.version.existing.mtx))
indx <- which(colnames(curr.existing.mtx) %in% curr.ver.exist.colnames)
curr.existing.mtx <- curr.existing.mtx[, -indx]
new.rownames <- unique(c(rownames(curr.existing.mtx), rownames(cop.final)))
diff.rnms <- setdiff(new.rownames, rownames(cop.final))
cop.comp.mtx <- matrix(NA, nrow = length(diff.rnms), ncol = ncol(cop.final))
rownames(cop.comp.mtx) <- diff.rnms
colnames(cop.comp.mtx) <- colnames(cop.final)
diff.rnms.2 <- setdiff(new.rownames, rownames(curr.existing.mtx))
cem.comp.mtx <- matrix(NA, nrow = length(diff.rnms.2), ncol = ncol(curr.existing.mtx))
View(cop.final)
rownames(cem.comp.mtx) <- diff.rnms.2
colnames(cem.comp.mtx) <- colnames(curr.existing.mtx)
to.merge.mtx.cop <- rbind(cop.final, cop.comp.mtx)
which(to.merge.mtx.cop["GCACGGTTCCGATAGT-1",] == 1)
to.merge.mtx.cem <- rbind(curr.existing.mtx, cem.comp.mtx)
new.mtx <- cbind(to.merge.mtx.cem, to.merge.mtx.cop)
which(new.mtx["GCACGGTTCCGATAGT-1",] == 1)
new.mtx <- cbind(to.merge.mtx.cem[,colnames(to.merge.mtx.cop)], to.merge.mtx.cop[,colnames(to.merge.mtx.cop)])
if (ncol(to.merge.mtx.cem) <= 0) {
new.mtx <- to.merge.mtx.cop[,colnames(cop.final)]
} else {
new.mtx <- cbind(to.merge.mtx.cop[,colnames(cop.final)], to.merge.mtx.cem[,colnames(cop.final)])
}
which(new.mtx["GCACGGTTCCGATAGT-1",] == 1)
SetCellTagCurrentVersionWorkingMatrix <- function(celltag.obj, slot.to.set, final.to.set) {
cop.final <- final.to.set
colnames(cop.final) <- paste0(celltag.obj@curr.version, ".", colnames(cop.final))
curr.version.existing.mtx <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, slot.to.set)
if (sum(dim(slot(celltag.obj, slot.to.set))) <= 0) {
slot(celltag.obj, slot.to.set) <- cop.final
} else  {
curr.existing.mtx <- slot(celltag.obj, slot.to.set)
if (ncol(curr.version.existing.mtx) > 0) {
curr.ver.exist.colnames <- paste0(celltag.obj@curr.version, ".", colnames(curr.version.existing.mtx))
indx <- which(colnames(curr.existing.mtx) %in% curr.ver.exist.colnames)
curr.existing.mtx <- curr.existing.mtx[, -indx]
}
new.rownames <- unique(c(rownames(curr.existing.mtx), rownames(cop.final)))
diff.rnms <- setdiff(new.rownames, rownames(cop.final))
cop.comp.mtx <- matrix(NA, nrow = length(diff.rnms), ncol = ncol(cop.final))
rownames(cop.comp.mtx) <- diff.rnms
colnames(cop.comp.mtx) <- colnames(cop.final)
diff.rnms.2 <- setdiff(new.rownames, rownames(curr.existing.mtx))
cem.comp.mtx <- matrix(NA, nrow = length(diff.rnms.2), ncol = ncol(curr.existing.mtx))
rownames(cem.comp.mtx) <- diff.rnms.2
colnames(cem.comp.mtx) <- colnames(curr.existing.mtx)
to.merge.mtx.cop <- rbind(cop.final, cop.comp.mtx)
to.merge.mtx.cem <- rbind(curr.existing.mtx, cem.comp.mtx)
if (ncol(to.merge.mtx.cem) <= 0) {
new.mtx <- to.merge.mtx.cop[,colnames(cop.final)]
} else {
new.mtx <- cbind(to.merge.mtx.cop[,colnames(cop.final)], to.merge.mtx.cem[,colnames(cop.final)])
}
slot(celltag.obj, slot.to.set) <- new.mtx
}
return(celltag.obj)
}
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 1, comparison = "greater")
d2.5.rna <- MetricBasedFiltering(d2.5.rna, 20, comparison = "less")
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",])
which(d2.5.rna@metric.filtered.count["GCACGGTTCCGATAGT-1",]==1)
which(d2.5.rna@whitelisted.count["GCACGGTTCCGATAGT-1",]==1)
setwd("~/Desktop/CellTagR/")
library(roxygen2)
devtools::document()
rm(list = c("GetCellTagCurrentVersionWorkingMatrix", "MetricBasedFiltering", "SetCellTagCurrentVersionWorkingMatrix"))
devtools::document()
