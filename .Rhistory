dox.ra.sag.obj <- AddModuleScore(dox.ra.sag.obj, features = list(c(gene.list.construct$V3)), ctrl = 5, name = "MN")
FeaturePlot(dox.ra.sag.obj, features = c("dorsal_features1", "dl11", "dl21", "dl31", "dl41", "dl51"))
dox.meta <- dox.obj@meta.data
dox.ra.sag.meta <- dox.ra.sag.obj@meta.data
dox.meta$category <- "Dox Only"
dox.ra.sag.meta$category <- "Dox RA SAG"
meta.all <- rbind(dox.meta, dox.ra.sag.meta)
meta.all.sub <- meta.all[,c(8:20)]
dox.meta <- dox.obj@meta.data
dox.ra.sag.meta <- dox.ra.sag.obj@meta.data
dox.meta$category <- "Dox + RA"
dox.ra.sag.meta$category <- "Dox + SAG"
meta.all <- rbind(dox.meta, dox.ra.sag.meta)
meta.all.sub <- meta.all[,c(7:19)]
meta.all.sub.melt <- reshape2::melt(meta.all.sub[,c(6:13)])
## Ref: https://stackoverflow.com/questions/17319487/median-and-quartile-on-violin-plots-in-ggplot2
median.quartile <- function(x){
out <- quantile(x, probs = c(0.25,0.5,0.75))
names(out) <- c("ymin","y","ymax")
return(out)
}
cs <- viridis(20)
ggplot(meta.all.sub.melt, aes(x = variable, y = value, fill = category)) +
geom_boxplot() +
scale_fill_viridis_d(option = "A", begin = 0.5, end = 0.9)
ggplot(meta.all.sub, aes(x = category, y = dorsal_features1, fill = category)) +
geom_violin(trim = T) +
scale_fill_viridis_d(option = "A", begin = 0.5, end = 0.9) +
stat_summary(fun.y=median.quartile,geom='point', color = rep(cs[c(20,1)], each = 3)) +
stat_summary(fun.y=median.quartile,geom='line', color = rep(cs[c(20,1)], each = 3)) +
stat_compare_means(label =  "p.signif", label.x = 1.5)
save.image("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Reprogrammed_mapped/112220_Dox_with_ra_or_sag_workspace.RData")
saveRDS(dox.obj, "~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/dox_ra_seurat.Rds")
saveRDS(dox.ra.sag.obj, "~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/dox_sag_seurat.Rds")
library(Seurat)
cc.genes.updated.2019
m.s.genes <- convertHumanGeneList(cc.genes.updated.2019$s.genes)
library(Seurat)
## Reference: https://www.r-bloggers.com/2016/10/converting-mouse-to-human-gene-names-with-biomart-package/
# Basic function to convert human to mouse gene names
convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"), martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}
m.s.genes <- convertHumanGeneList(cc.genes.updated.2019$s.genes)
m.g2m.genes <- convertHumanGeneList(cc.genes.updated.2019$g2m.genes)
no.dox <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/no_dox_seurat.Rds")
dox <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/dox_seurat.Rds")
dox.ra <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/dox_ra_seurat.Rds")
dox.sag <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/dox_sag_seurat.Rds")
dox.ra.sag <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/dox_ra_sag_seurat.Rds")
no.dox.ra.sag <- readRDS("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/Seurat_objects/ra_sag_seurat.Rds")
no.dox <- CellCycleScoring(no.dox, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
dox <- CellCycleScoring(dox, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
dox.ra <- CellCycleScoring(dox.ra, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
dox.ra.sag <- CellCycleScoring(dox.ra.sag, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
dox.sag <- CellCycleScoring(dox.sag, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
no.dox.ra.sag <- CellCycleScoring(no.dox.ra.sag, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE)
# Running a PCA on cell cycle genes reveals, unsurprisingly, that cells separate entirely by
# phase
no.dox <- RunPCA(no.dox, features = c(m.s.genes, m.g2m.genes))
no.dox.ra.sag <- RunPCA(no.dox.ra.sag, features = c(m.s.genes, m.g2m.genes))
dox <- RunPCA(dox, features = c(m.s.genes, m.g2m.genes))
dox.ra <- RunPCA(dox.ra, features = c(m.s.genes, m.g2m.genes))
dox.sag <- RunPCA(dox.sag, features = c(m.s.genes, m.g2m.genes))
dox.ra.sag <- RunPCA(dox.ra.sag, features = c(m.s.genes, m.g2m.genes))
DimPlot(dox)
DimPlot(dox.ra)
DimPlot(dox.sag)
DimPlot(dox.ra.sag)
DimPlot(no.dox)
DimPlot(no.dox.ra.sag)
dox@reductions$umap@cell.embeddings
ggplot(dox@reductions$umap@cell.embeddings, aes(x = UMAP_1, y = UMAP_2, color = dox@meta.data$Phase)) +
geom_point()
library(ggplot2)
ggplot(dox@reductions$umap@cell.embeddings, aes(x = UMAP_1, y = UMAP_2, color = dox@meta.data$Phase)) +
geom_point()
ggplot(as.data.frame(dox@reductions$umap@cell.embeddings), aes(x = UMAP_1, y = UMAP_2, color = dox@meta.data$Phase)) +
geom_point()
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = Phase)) +
geom_point() +
scale_color_viridis_d()
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = Phase)) +
geom_point() +
scale_color_viridis_d()
View(dox.emb.df)
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d()
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 10),
axis.title = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.emb.df <- as.data.frame(dox@reductions$umap@cell.embeddings)
dox.emb.df$phase <- dox@meta.data[rownames(dox.emb.df), "Phase"]
ggplot(dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.ra.emb.df <- as.data.frame(dox.ra@reductions$umap@cell.embeddings)
dox.ra.emb.df$phase <- dox.ra@meta.data[rownames(dox.ra.emb.df), "Phase"]
ggplot(dox.ra.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.sag.emb.df <- as.data.frame(dox.sag@reductions$umap@cell.embeddings)
dox.sag.emb.df$phase <- dox.sag@meta.data[rownames(dox.sag.emb.df), "Phase"]
ggplot(dox.sag.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
dox.ra.sag.emb.df <- as.data.frame(dox.ra.sag@reductions$umap@cell.embeddings)
dox.ra.sag.emb.df$phase <- dox.ra.sag@meta.data[rownames(dox.ra.sag.emb.df), "Phase"]
ggplot(dox.ra.sag.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
no.dox.emb.df <- as.data.frame(no.dox@reductions$umap@cell.embeddings)
no.dox.emb.df$phase <- no.dox@meta.data[rownames(no.dox.emb.df), "Phase"]
ggplot(no.dox.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
no.dox.ra.sag.emb.df <- as.data.frame(no.dox.ra.sag@reductions$umap@cell.embeddings)
no.dox.ra.sag.emb.df$phase <- no.dox.ra.sag@meta.data[rownames(no.dox.ra.sag.emb.df), "Phase"]
ggplot(no.dox.ra.sag.emb.df, aes(x = UMAP_1, y = UMAP_2, color = phase)) +
geom_point() +
scale_color_viridis_d() +
theme(legend.position="right",
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
table(dox@meta.data$Phase)/sum(table(dox@meta.data$Phase))
table(dox.ra@meta.data$Phase)/sum(table(dox.ra@meta.data$Phase))
table(dox.ra.sag@meta.data$Phase)/sum(table(dox.ra.sag@meta.data$Phase))
table(dox.sag@meta.data$Phase)/sum(table(dox.sag@meta.data$Phase))
table(no.dox@meta.data$Phase)/sum(table(no.dox@meta.data$Phase))
table(no.dox.ra.sag@meta.data$Phase)/sum(table(no.dox.ra.sag@meta.data$Phase))
FeaturePlot(dox.ra.sag, features = c("Pou5f1", "Nanog", "Esrrb"), reduction = "umap")
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
View(sp.markers)
intersect(sp.markers, rownames(no.dox))
intersect(sp.markers, rownames(no.dox@assays$RNA@counts))
rownames(no.dox@assays$RNA@counts)
intersect(sp.markers$V1, rownames(no.dox@assays$RNA@counts))
intersect(sp.markers$V1, rownames(no.dox@assays$RNA@data))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot <- intersect(sp.markers$V1, rownames(no.dox@assays$RNA@data))
FeaturePlot(no.dox, features = sp.to.plot, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
View(sp.markers)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox@assays$RNA@data)), ]
View(sp.to.plot.sub)
pre.mn <- sp.to.plot.sub$V1[1:16]
pre.mn
pre.mn <- sp.to.plot.sub$V1[1:15]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:15]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(sp.markers)
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:15]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:15]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:15]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
FeaturePlot(no.dox, features = setdiff(sp.to.plot.sub$V1, pre.mn), reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
View(sp.markers)
FeaturePlot(no.dox, features = sp.to.plot.sub[16:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
FeaturePlot(no.dox, features = sp.to.plot.sub$V1[16:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
FeaturePlot(no.dox, features = sp.to.plot.sub$V1[16:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(no.dox, features = sp.to.plot.sub$V1[16:27], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(no.dox, features = sp.to.plot.sub$V1[28:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
View(sp.to.plot.sub)
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:13]
FeaturePlot(no.dox, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:13]
FeaturePlot(no.dox.ra.sag, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(sp.to.plot.sub)
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:14]
FeaturePlot(no.dox.ra.sag, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(sp.to.plot.sub)
FeaturePlot(no.dox, features = sp.to.plot.sub$V1[15:26], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(no.dox.ra.sag, features = sp.to.plot.sub$V1[15:26], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:14]
FeaturePlot(no.dox.ra.sag, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
sp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/sp markers.csv", header = F, stringsAsFactors = F)
sp.to.plot.sub <- sp.markers[which(sp.markers$V1 %in% rownames(no.dox.ra.sag@assays$RNA@data)), ]
pre.mn <- sp.to.plot.sub$V1[1:14]
FeaturePlot(no.dox.ra.sag, features = pre.mn, reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(no.dox.ra.sag, features = sp.to.plot.sub$V1[27:36], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
dp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/dp markers.csv", header = F, stringsAsFactors = F)
View(dp.markers)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox@assays$RNA@data)), ]
View(dp.sub)
dp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/dp markers.csv", header = F, stringsAsFactors = F)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox@assays$RNA@data)), ]
FeaturePlot(dox, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
dp.markers <- read.csv("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/Briggs et al 2017/dp markers.csv", header = F, stringsAsFactors = F)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox@assays$RNA@data)), ]
FeaturePlot(dox, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(dp.sub)
FeaturePlot(dox, features = dp.sub$V1[17:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(dox, features = dp.sub$V1[17:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
View(dp.sub)
FeaturePlot(dox, features = dp.sub$V1[17:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
FeaturePlot(dox, features = dp.sub$V1[17:30], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
FeaturePlot(dox, features = dp.sub$V1[31:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox, features = dp.sub$V1[17:31], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 5)
FeaturePlot(dox, features = dp.sub$V1[17:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox, features = dp.sub$V1[17:28], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox, features = dp.sub$V1[29:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox, features = dp.sub$V1[29:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
FeaturePlot(dox, features = dp.sub$V1[29:37], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
View(no.dox)
View(dp.markers)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox.ra@assays$RNA@data)), ]
FeaturePlot(dox.ra, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(dp.sub)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox.ra@assays$RNA@data)), ]
FeaturePlot(dox.ra, features = dp.sub$V1[1:17], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox.ra@assays$RNA@data)), ]
FeaturePlot(dox.ra, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
FeaturePlot(dox.ra, features = dp.sub$V1[18:29], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox.ra, features = dp.sub$V1[30:38], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox.sag@assays$RNA@data)), ]
FeaturePlot(dox.sag, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(dp.sub)
FeaturePlot(dox.sag, features = dp.sub$V1[17:27], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox.sag, features = dp.sub$V1[28:34], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
dp.sub <- dp.markers[which(dp.markers$V1 %in% rownames(dox.ra.sag@assays$RNA@data)), ]
FeaturePlot(dox.ra.sag, features = dp.sub$V1[1:16], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)))
View(dp.sub)
View(dp.sub)
FeaturePlot(dox.ra.sag, features = dp.sub$V1[18:29], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 4)
FeaturePlot(dox.ra.sag, features = dp.sub$V1[31:39], reduction = "umap", cols = c(viridis::viridis(1), viridis::viridis(20)), ncol = 3)
no.dox <- ScaleData(no.dox, vars.to.regress = c("S.Score", "G2M.Score"), features = rownames(no.dox))
no.dox.ra.sag <- ScaleData(no.dox.ra.sag, vars.to.regress = c("S.Score", "G2M.Score"), features = rownames(no.dox.ra.sag))
library(roxygen2)
library(devtools)
setwd("~/Desktop/CellTagR/")
document
document()
test.obj <- readRDS("~/Desktop/Morris Lab/CellTagR Edit/filtered_celltag_obj.Rds")
#'
#' This function generate the .txt file that will be fed into starcode - https://github.com/gui11aume/starcode - to collapse similar CellTags.
#' @param celltag.obj A CellTag object with the raw count matrix filled.
#' @param output.file The filepath and name to save the table for collapsing (usually a .txt file)
#' @return A CellTag object with collapsing mapping table stored in pre.starcode slot
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' CellTagDataForCollapsing(bam.test.obj, "./collapsing.txt")
#'
CellTagDataForCollapsing <- function(celltag.obj, output.file) {
# Get the data out from the CellTag object
umi.matrix <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
for.collapse <- as.data.frame(summary(umi.matrix))
for.collapse$i <- rownames(umi.matrix)[for.collapse$i]
for.collapse$j <- colnames(umi.matrix)[for.collapse$j]
colnames(for.collapse) <- c("X2", "X1", "value")
for.collapse$X1 <- as.character(for.collapse$X1)
for.collapse$X2 <- as.character(for.collapse$X2)
# Create the contatenation column
if (length(list.files(celltag.obj@fastq.bam.dir)) > 1) {
parts.to.paste <- unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[2]))
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(parts.to.paste, "-"), function(x) x[1])))
sample.list.prefix <- unique(unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[1])))
r <- apply(as.data.frame(sample.list.prefix), 1,
function(x) {
for.collapse.sub <- for.collapse[which(startsWith(for.collapse$X2, x)), c("concat", "value")]
filename.to.save <- paste0(strsplit(output.file, "[.]")[[1]][1], "_", x, ".txt")
write.table(for.collapse.sub, filename.to.save, sep = "\t", row.names = F, quote = F, col.names = F)
})
} else {
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
for.collapse.sub <- for.collapse[, c("concat", "value")]
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
}
# Set CellTag object
celltag.obj@pre.starcode[[celltag.obj@curr.version]] <- for.collapse
# Print the path saved
cat("The file for collapsing is stored at: ", output.file, "\n")
return(celltag.obj)
}
CellTagDataForCollapsing(test.obj, "~/Desktop/test.txt")
summary(test.obj@raw.count)
test.obj <- readRDS("~/Desktop/bam.test.obj_mtx.Rds")
test.obj@raw.count
umi.matrix <- test.obj@raw.count
for.collapse <- as.data.frame(summary(umi.matrix))
for.collapse$i <- rownames(umi.matrix)[for.collapse$i]
for.collapse$j <- colnames(umi.matrix)[for.collapse$j]
colnames(for.collapse) <- c("X2", "X1", "value")
for.collapse$X1 <- as.character(for.collapse$X1)
for.collapse$X2 <- as.character(for.collapse$X2)
# Create the contatenation column
if (length(list.files(celltag.obj@fastq.bam.dir)) > 1) {
parts.to.paste <- unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[2]))
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(parts.to.paste, "-"), function(x) x[1])))
sample.list.prefix <- unique(unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[1])))
r <- apply(as.data.frame(sample.list.prefix), 1,
function(x) {
for.collapse.sub <- for.collapse[which(startsWith(for.collapse$X2, x)), c("concat", "value")]
filename.to.save <- paste0(strsplit(output.file, "[.]")[[1]][1], "_", x, ".txt")
write.table(for.collapse.sub, filename.to.save, sep = "\t", row.names = F, quote = F, col.names = F)
})
} else {
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
for.collapse.sub <- for.collapse[, c("concat", "value")]
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
}
celltag.obj <- test.obj
output.file <- "~/Desktop/test.txt"
# Create the contatenation column
if (length(list.files(celltag.obj@fastq.bam.dir)) > 1) {
parts.to.paste <- unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[2]))
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(parts.to.paste, "-"), function(x) x[1])))
sample.list.prefix <- unique(unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[1])))
r <- apply(as.data.frame(sample.list.prefix), 1,
function(x) {
for.collapse.sub <- for.collapse[which(startsWith(for.collapse$X2, x)), c("concat", "value")]
filename.to.save <- paste0(strsplit(output.file, "[.]")[[1]][1], "_", x, ".txt")
write.table(for.collapse.sub, filename.to.save, sep = "\t", row.names = F, quote = F, col.names = F)
})
} else {
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
for.collapse.sub <- for.collapse[, c("concat", "value")]
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
}
# Set CellTag object
celltag.obj@pre.starcode[[celltag.obj@curr.version]] <- for.collapse
CellTagDataForCollapsing(test.obj, "~/Desktop/test_2.txt")
View(for.collapse)
for.collapse <- for.collapse[which(for.collapse$value > 0), ]
View(for.collapse)
#'
#' This function generate the .txt file that will be fed into starcode - https://github.com/gui11aume/starcode - to collapse similar CellTags.
#' @param celltag.obj A CellTag object with the raw count matrix filled.
#' @param output.file The filepath and name to save the table for collapsing (usually a .txt file)
#' @return A CellTag object with collapsing mapping table stored in pre.starcode slot
#' @keywords single-cell RNA-seq data, CellTagging
#' @export
#' @examples
#' CellTagDataForCollapsing(bam.test.obj, "./collapsing.txt")
#'
CellTagDataForCollapsing <- function(celltag.obj, output.file) {
# Get the data out from the CellTag object
umi.matrix <- GetCellTagCurrentVersionWorkingMatrix(celltag.obj, "raw.count")
for.collapse <- as.data.frame(summary(umi.matrix))
for.collapse$i <- rownames(umi.matrix)[for.collapse$i]
for.collapse$j <- colnames(umi.matrix)[for.collapse$j]
colnames(for.collapse) <- c("X2", "X1", "value")
for.collapse$X1 <- as.character(for.collapse$X1)
for.collapse$X2 <- as.character(for.collapse$X2)
for.collapse <- for.collapse[which(for.collapse$value > 0), ]
# Create the contatenation column
if (length(list.files(celltag.obj@fastq.bam.dir)) > 1) {
parts.to.paste <- unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[2]))
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(parts.to.paste, "-"), function(x) x[1])))
sample.list.prefix <- unique(unlist(lapply(strsplit(for.collapse$X2, "_"), function(x) x[1])))
r <- apply(as.data.frame(sample.list.prefix), 1,
function(x) {
for.collapse.sub <- for.collapse[which(startsWith(for.collapse$X2, x)), c("concat", "value")]
filename.to.save <- paste0(strsplit(output.file, "[.]")[[1]][1], "_", x, ".txt")
write.table(for.collapse.sub, filename.to.save, sep = "\t", row.names = F, quote = F, col.names = F)
})
} else {
for.collapse$concat <- paste0(for.collapse$X1, unlist(lapply(strsplit(for.collapse$X2, "-"), function(x) x[1])))
for.collapse.sub <- for.collapse[, c("concat", "value")]
write.table(for.collapse.sub, output.file, sep = "\t", row.names = F, quote = F, col.names = F)
}
# Set CellTag object
celltag.obj@pre.starcode[[celltag.obj@curr.version]] <- for.collapse
# Print the path saved
cat("The file for collapsing is stored at: ", output.file, "\n")
return(celltag.obj)
}
CellTagDataForCollapsing(test.obj, "~/Desktop/test_2.txt")
test.obj <- CellTagDataForCollapsing(test.obj, "~/Desktop/test_2.txt")
saveRDS(test.obj, "~/Desktop/bam.test.obj_mtx_pre_collapse.Rds")
test.obj <- CellTagDataPostCollapsing(test.obj, "~/Desktop/collapsing_result.txt")
rm(umi.matrix)
rm(test.obj)
gc()
save.image("~/Desktop/Morris Lab/Manuscripts/Capybara/MN revision/nova_seq_110920/cell_Cycle_analysis.RData")
